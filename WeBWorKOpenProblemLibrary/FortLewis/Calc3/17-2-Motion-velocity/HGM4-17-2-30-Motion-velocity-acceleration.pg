##DESCRIPTION
## Parametrizing curves in space
##ENDDESCRIPTION

##KEYWORDS('Vector','Parametric','Geometry')

## DBsubject('Calculus')
## DBchapter('Vector Functions')
## DBsection('Motion in Space: Velocity and Acceleration')
## Date('10/31/09')
## Author('Paul Pearson')
## Institution('Fort Lewis College')
## TitleText1('Calculus')
## TitleText2('Calculus')
## EditionText1('4')
## EditionText2('5')
## AuthorText1('Hughes-Hallett')
## AuthorText2('Hughes-Hallett')
## Section1('17.2')
## Section2('17.2')
## Problem1('30')
## Problem2('35')


DOCUMENT();      

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserVectorUtils.pl",
"PGcourse.pl",
);

TEXT( beginproblem() );

Context("Vector");
Context()->variables->are(t=>"Real");
Context()->flags->set( ijk=>1 );

$a = random(2,5,1);
$b = random(2,5,1);
$h = $a * $b;

$x = Formula("cos(pi*t)");
$y = Formula("sin(pi*t)");
$z = Formula("$a * t");

$xt = $x->D('t');
$yt = $y->D('t');
$zt = $z->D('t');

$displacement = Vector( $x, $y, $z );

$velocity = Vector( $xt, $yt, $zt )->eval(t=>"$b");

$P = $displacement->eval(t=>"$b");
$V = $velocity;
$T = Formula("(t - $b)") -> reduce;
$L = $P + $T * $V;


################################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
Suppose \( \vec{r}(t) = $displacement \) represents
the position of a particle on a helix, where \( z \)
is the height of the particle.
$BR
$BR
(a) What is \(t\) when the particle has height \( $h \)? 
$BR
\(t =\) \{ans_rule(20)\}
$BR
$BR
(b) What is the velocity of the particle when 
its height is \( $h \)?
$BR
\( \vec{v} = \) \{ans_rule(40)\}
$BR
$BR
(c) When the particle has height \( $h \), it leaves
the helix and moves along the tangent line at the constant
velocity found in part (b).  Find a vector 
parametric equation for the position of the particle
(in terms of the original parameter \( t \)) as it moves 
along this tangent line.
$BR
\( L(t) =\) \{ans_rule(50)\}
END_TEXT
Context()->normalStrings;

######################
#  Answer evaluators

$showPartialCorrectAnswers = 1;

sub mycheck {
  my ($correct, $student, $ansHash) = @_;

  if ( 
       ($correct . i == $student . i) && 
       ($correct . j == $student . j) && 
       ($correct . k == $student . k) 
     ) 
  { return 1; } else { return 0; }

}


ANS(Real("$b")->cmp());
ANS($velocity->cmp());
ANS($L->cmp( checker=>~~&mycheck) );


COMMENT('MathObject version');
ENDDOCUMENT();

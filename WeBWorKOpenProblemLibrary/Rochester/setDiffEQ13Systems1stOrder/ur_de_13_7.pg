## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## KEYWORDS('differential equation' 'first order' 'matrices' 'eigenvalue')
## Tagged by tda2d

## DBsubject('Calculus')
## DBchapter('Differential Equations')
## DBsection('Systems of Differential Equations')
## Date('')
## Author('')
## Institution('Rochester')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')



DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
           "PGstandard.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGmatrixmacros.pl",
           "MathObjects.pl",
           "parserMultiAnswer.pl",
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;
Context("Numeric");

$a_det=0;
$max_iterations = 10;
$a= new Matrix(2,2);
while (abs($a_det)<.1 && $max_iterations--) {
# define matrix
        $a->assign(1,1,random(-5,5,1) );
        $a->assign(1,2,random(-5,5,1) );
        $a->assign(2,1,random(-5,5,1) );
        $a->assign(2,2,random(-5,5,1) );
        $a_lr = $a->decompose_LR();
        $a_det = $a_lr->det_LR()
}
warn "Can't calculate an invertible matrix" unless $max_iterations;
#define inverse matrix
        $b = $a_lr->invert_LR();
#define eigenvalues
    $e = new Matrix(2,2);
    $e->one();
    $e->assign(1,1, random(-5,5,1)*$a_det);
    $e->assign(2,2, random(-5,5,1)*$a_det);
#define final matrix
        $matrix = $a * $e *$b;
        $matrix_lr = $matrix->decompose_LR();
        $matrix_det = $matrix_lr->det_LR();

Context("Matrix"); 

$e1 = $e->element(1,1); $e1 = Real("$e1");
$e2 = $e->element(2,2); $e2 = Real("$e2");

$a11 = $matrix->element(1,1); $a11 = Real("$a11");
$a12 = $matrix->element(1,2); $a12 = Real("$a12");
$a21 = $matrix->element(2,1); $a21 = Real("$a21");
$a22 = $matrix->element(2,2); $a22 = Real("$a22");

$multians1 = MultiAnswer(Compute("$e1"),1,Compute("($e1 - $a11)/($a12)"),$e2,1,Compute("($e2 - $a11)/($a12)"))->with(
  singleResult => 0,
  checker => sub {
      my ($correct, $student, $self ) = @_;
      my ($e1stu,$Vec1astu,$Vec1bstu,$e2stu,$Vec2astu,$Vec2bstu)= @{$student};
      my ($e1cor,$Vec1acor,$Vec1bcor,$e2cor,$Vec2acor,$Vec2bcor)= @{$correct};


      #Create student's implied matrix, test whether the vector they entered 
      #  with the eigenvalue is actually an eigenvector:      
      #  That is to test:
      # [ a11  a12 ][v1] = e1 * [v1]      
      # [ a21  a22 ][v2]        [v2]
      $EVector1Stu = Matrix("[[$Vec1astu],[$Vec1bstu]]");
      $EVector2Stu = Matrix("[[$Vec2astu],[$Vec2bstu]]");

      $e1stu = Real("$e1stu");
      $e2stu = Real("$e2stu");

      #Logic for the if block:
      # Checks if either eigenvalue match either correct eigenvalue, then check 
      # eigenvectors. The downfall here is, by the way I check the 
      # eigenvectors, the student must have declared the corresponding 
      # eigenvalue FIRST.

if(($e1stu == $e1cor)&&($e2stu == $e2cor)){       
     return[($e1stu == $e1cor),
            ((($AB*$EVector1Stu) == ($e1stu*$EVector1Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]"))),
            ((($AB*$EVector1Stu) == ($e1stu*$EVector1Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]"))),
            ($e2stu == $e2cor),
            ((($AB*$EVector2Stu == $e2stu*$EVector2Stu))&&
                ($EVector2Stu != Compute("[[0],[0]]"))),
            ((($AB*$EVector2Stu == $e2stu*$EVector2Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]")))]; }

elsif(($e1stu == $e2cor)&&($e2stu == $e1cor)){       
     return[($e1stu == $e2cor),
            ((($AB*$EVector1Stu) == ($e1stu*$EVector1Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]"))),
            ((($AB*$EVector1Stu) == ($e1stu*$EVector1Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]"))),
            ($e2stu == $e1cor),
            ((($AB*$EVector2Stu == $e2stu*$EVector2Stu))&&
                ($EVector2Stu != Compute("[[0],[0]]"))),
            ((($AB*$EVector2Stu == $e2stu*$EVector2Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]")))]; }

elsif(($e1stu == $e1cor)||($e2stu == $e2cor)){       
     return[($e1stu == $e1cor),
            ((($AB*$EVector1Stu) == ($e1stu*$EVector1Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]"))),
            ((($AB*$EVector1Stu) == ($e1stu*$EVector1Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]"))),
            ($e2stu == $e2cor),
            ((($AB*$EVector2Stu == $e2stu*$EVector2Stu))&&
                ($EVector2Stu != Compute("[[0],[0]]"))),
            ((($AB*$EVector2Stu == $e2stu*$EVector2Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]")))]; }

elsif(($e1stu == $e2cor)||($e2stu == $e1cor)){       
     return[($e1stu == $e2cor),
            ((($AB*$EVector1Stu) == ($e1stu*$EVector1Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]"))),
            ((($AB*$EVector1Stu) == ($e1stu*$EVector1Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]"))),
            ($e2stu == $e1cor),
            ((($AB*$EVector2Stu == $e2stu*$EVector2Stu))&&
                ($EVector2Stu != Compute("[[0],[0]]"))),
            ((($AB*$EVector2Stu == $e2stu*$EVector2Stu))&&
                ($EVector1Stu != Compute("[[0],[0]]")))]; }


  }
);


##########################

#Convert matrices to math objects matrices (this does not happen automatically).

$AB = Matrix("[[$a11,$a12],[$a21,$a22]]");

Context()->texStrings;
BEGIN_TEXT
Calculate the eigenvalues of this matrix:
$PAR
[Note-- you'll probably want to use a graphing calculator to estimate the roots of the polynomial which defines
the eigenvalues. You can use the web version at
\{htmlLink("http://webwork.math.rochester.edu/mth163/phaseplaneplotters/launchXfunctions.html", 
"xFunctions", q!TARGET="plotter"!)\}.
$PAR
If you select the "integral curves utility" from the main menu, will also be able to plot the integral curves of the
associated differential equations. ]
$PAR
\[ A = $AB \]
$BR 
Eigenvalue \( \lambda_1 = \) \{$multians1->ans_rule(10)\} $BR
associated eigenvector \( E_{\lambda_{1}}=  \) ( \{$multians1->ans_rule(5) \}  , \{ $multians1->ans_rule(5) \} ) 
$BR $BR
Eigenvalue \( \lambda_2 = \) \{$multians1->ans_rule(10) \} $BR
associated eigenvector \( E_{\lambda_{2}}= \)  ( \{$multians1->ans_rule(5) \}  , \{ $multians1->ans_rule(5) \} ) $BR $BR

$BBOLD NOTE: An eigenvector will not be checked until the corresponding eigenvalue is entered. $EBOLD 

END_TEXT
Context()->normalStrings;

ANS($multians1->cmp);

#  behavior of differential equations defined by A
$mc = new_multiple_choice();  # the parens are important -- otherwise the name of the object is new_multiple_choice.

@answers =(
        'All of the solutions curves would converge towards 0. (Stable node)',
        'All of the solution curves would run away from 0. (Unstable node)',
        'The solution curves would race towards zero and then veer away towards infinity. (Saddle)',
        'The solution curves converge to different points.'
);
$matrix_trace=$matrix->trace();
#switch

$matrix_det <0                     && do {$ind=2 };  #saddle
$matrix_det>0 and $matrix_trace>0  && do {$ind=1 };  #unstable node
$matrix_det>0 and $matrix_trace<0  && do {$ind=0 };  # stable node
$matrix_det==0                      && do {$ind=3 };
  
$mc->qa(
        q!If \(y' = Ay\) is a differential equation, how would the solution curves behave?!,
        splice(@answers,$ind,1)   # enter the correct answer
        );
       
$mc->extra(@answers);

BEGIN_TEXT
$HR
  $PAR
 \{ $mc->print_q() \}
$PAR
\{ $mc->print_a() \}
$HR
END_TEXT

ANS(radio_cmp($mc->correct_ans));

ENDDOCUMENT() ;
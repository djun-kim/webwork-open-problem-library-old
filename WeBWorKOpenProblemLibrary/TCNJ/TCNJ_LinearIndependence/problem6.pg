## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('vectors' 'basis' 'linearly independent' 'dependent')
## Tagged by tda2d

## DBsubject('Linear Algebra')
## DBchapter('Vector Spaces')
## DBsection('Bases')
## Date('')
## Author('')
## Institution('TCNJ')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGnumericalmacros.pl",
           "PGmatrixmacros.pl",
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$flip = 1;  # choose between dependent and independent vectors
$lambda = new Matrix(4,1);
$a=non_zero_random(1,5,1);
$b=non_zero_random(1,5,1);
$c=non_zero_random(1,5,1);

# we'll scramble the vectors and coefficients

 
## $vec[$slice[0]] = Matrix->new_column_matrix([$v01, $v02, $v03, $v04]);


##$vec[1] = Matrix->new_column_matrix([ $v11, $v12, $v13, $v14 ]);

    $lambda->assign(1 ,1,-$a);
    $lambda->assign(2 ,1,-$b);
    $lambda->assign(3 ,1,-$c);
    $lambda->assign(4 ,1,1);

$sl = new_pop_up_select_list();
$sl->qa(
"Determine whether or not the four vectors listed above are linearly independent or linearly dependent.",
'Linearly_Dependent');
$sl->choose(1);
$sl->ra_pop_up_list(['No_Answer_Entered' => 'Select an Answer', 'Linearly_Independent' => 'Linearly Independent', 'Linearly_Dependent' => 'Linearly Dependent']);
$string1=nicestring([$a, $b, $c], ['r','u','d']);

BEGIN_TEXT
$BR
Let \(  S= \left\{"\{"\}r, u, d, x \right\} \) be a set of vectors.  
$BR $BR
If \(x = $string1 \),  determine whether or not \(S\) is linearly independent.

\{$sl->print_q()\} 

If \(S\) is dependent, enter a non-trivial linear relation below.  Otherwise, enter 0's for the coefficients.
$BR
$BR

\{NAMED_ANS_RULE(vec1,10)\}          \( r + \) 
\{NAMED_ANS_RULE_OPTION(vec1,10)\}   \( u + \) 
\{NAMED_ANS_RULE_OPTION(vec1,10)\}   \( d + \) 
\{NAMED_ANS_RULE_OPTION(vec1,10)\}   \( x = 0\). 

END_TEXT
ANS str_cmp($sl->ra_correct_ans);
NAMED_ANS vec1=> vec_cmp2($lambda);


sub vec_cmp2{    #check to see that the submitted vector is a non-zero multiple of the correct vector
    my $correct_matrix = shift;
    my %options = @_;
    set_default_options( ~~%options,
						 debug			=>	0,
	);
    $ans_eval = new AnswerEvaluator;
    # This line enables the debug option for the answer evaluator factory.
    $ans_eval->{debug} = $options{debug};  
    # Set up the correct answer message.
    $ans_eval->ans_hash( correct_ans  => "a multiple of ( " . join(", ", $correct_matrix->list() ) . " )",  
    					 type		  => 'vec_cmp2'
    );
    # Check that the input is a reference to an array. 
    $ans_eval->install_pre_filter(~~&is_array);
    # Check the syntax of the student's answer and perform any simplifications.
    # This filter does arithmetic for you.
 	$ans_eval->install_pre_filter(~~&std_num_array_filter);
    # Here is where the actually comparison is made to determine if the student's answer and the correct
    # answer are multiples of each other.
 	$ans_eval->install_evaluator(sub { my $rh_ans = shift;
 									   my %options  = @_;
 									   my @in_vec=@{$rh_ans->input()};
									   unless (@in_vec ) {
 	                                   		return($rh_ans); # return blank answers
 	                                   		# make sure the vectors are the same dimension
 	                                   }
 									   my $input_vec = Matrix->new_column_matrix($rh_ans->input());
 									   my ($param,$inv);
 									   if ($flip == 0) { #case of independent vectors
 									   		$param = new Matrix(1,1);
 									   		$param->zero;
 									   } else {
 									   		$param = $correct_matrix->proj_coeff($input_vec);
 									   		$param->assign(1,1,1) if $param->element(1,1)==0; # don't allow identically zero answer
 									   }
 									    my $out_vec = $input_vec - $correct_matrix*$param;
								 	    my @diff = $out_vec->list();  # lists a column vector
								 		$rh_ans->{score} = zero_check(~~@diff,tol=>.001);
								 		$rh_ans;

 								 	
 	});
 	# Clean up error messages and prepare them to be posted for the edification of the student.
    $ans_eval->install_post_filter( sub { my $rh_ans= shift;
 											  my %options = @_;
 											  if ($rh_ans->catch_error('NOTARRAY') ) {
 												  $rh_ans->{ans_message} = "This answer is supposed to be an array. There may be something wrong
 												  with the way the answer blanks were inserted -- or it might be something else.";  
 											  }
 											  $rh_ans;
 	});
 	$ans_eval->install_post_filter( sub { 	  my $rh_ans= shift;
  											  my %options = @_;
 											  if ($rh_ans->catch_error('SYNTAX') ) {
 												  $rh_ans->{ans_message} .= $rh_ans->{error_message};
 												  $rh_ans->clear_error('SYNTAX');
 											  }
											  $rh_ans;
  	});
    $ans_eval;
}
ENDDOCUMENT() ;        


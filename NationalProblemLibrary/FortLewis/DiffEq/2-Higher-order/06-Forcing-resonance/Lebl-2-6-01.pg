## DESCRIPTION
## Higher order ODEs: constant coefficient second order nonhomogeneous linear ODEs
## ENDDESCRIPTION

## KEYWORDS('differential equations','second order linear ODE','constant coefficients','nonhomogeneous')

## DBsubject('Differential Equations')
## DBchapter('Higher Order Differential Equations')
## DBsection('Second Order Linear Nonhomogeneous')
## Date('01/30/2011')
## Author('Paul Pearson')
## Institution('Fort Lewis College')
## TitleText1('Notes on Diffy Qs')
## EditionText1('December 9, 2010')
## AuthorText1('Jiri Lebl')
## Section1('2.6')
## Problem1('1')


##############################
#  Initialization

DOCUMENT(); 

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"AnswerFormatHelp.pl",
"parserAssignment.pl",
"unionLists.pl",
);

TEXT(beginproblem());


#############################
#  Setup

Context("Numeric");
Context()->variables->are(
A=>"Real",B=>"Real",t=>"Real",y=>"Real",
'a'=>'Parameter','b'=>'Parameter'
);

$m = random(2,4,1);  #  mass
do { $k = random(2,9,1); } until ($k != $m);  # spring constant
$c = random(1,3,1);  # damping constant

$F0 = random(2,9,1); # amplitude of forcing function
$omega = random(2,4,1); # angular frequency of forcing function

$disc = $c**2 - 4*$m*$k; # discriminant
$absdisc = abs($disc);
$denhomog  = 2*$m;  # denominator

$numA = -$c*$omega*$F0;
$numB = ($k - $m * ($omega)**2) * $F0;
$denA = ( $k - $m * ($omega)**2 )**2 + $c**2 * $omega**2;
$denB = $denA;

$xparticular = Compute("$numA/$denA cos($omega t) + $numB/$denB sin($omega t) + 
e^(-$b t / $denhomog) * ( a cos(sqrt($absdisc) t / $denhomog) + b sin(sqrt($absdisc) t / $denhomog) )");

#$xhomogeneous = Compute("e^(-$b t / $den) * ( A cos(sqrt($absdisc) t / $den) + B sin(sqrt($absdisc) t / $den) )");



######################
#  Main text

Context()->texStrings;
BEGIN_TEXT
Suppose a spring with spring constant \( $k \ \mathrm{N/m} \)
is horizontal and has one end attached to a wall and the 
other end attached to a \( $m \ \mathrm{kg} \) mass.  Suppose 
that the friction of the mass with the floor (i.e., the damping
constant) is \( $c \ \mathrm{N \cdot s / m} \), and the 
forcing function is \( F(t) = $F0 \sin($omega t) \). 

\{ BeginList('OL',type=>'a') \}

$ITEM Find a particular solution to the 
nonhomogeneous differential equation \( $diffeq \).
$BR
$BR
\( x_{p} = \) 
\{ ans_rule(60) \}
\{ AnswerFormatHelp("formulas") \}


\{ EndList('OL') \}
END_TEXT
Context()->normalStrings;


######################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS( $xparticular->cmp() );


COMMENT("MathObject version.");

ENDDOCUMENT();



$ITEMSEP
$ITEM Find the most general solution to the 
associated homogeneous differential equation.  
Use \( A \) and \( B \) in your answer to denote 
arbitrary constants.
$BR
$BR
\( y_h = \)
\{ ans_rule(60) \}
\{ AnswerFormatHelp("formulas") \}


$ITEMSEP
$ITEM Find the solution to the original 
nonhomogeneous differential equation satisfying
the initial conditions \( y(0) = $y0 \) and 
\( y'(0) = $yprime0 \).
$BR
$BR
\( y = \)
\{ ans_rule(60) \}
\{ AnswerFormatHelp("formulas") \}





ANS( $yhomogeneous->cmp( 
  checker => sub {
    my ( $correct, $student, $self ) = @_;
    my $stu   = Formula($student);

    ################################
    #  Check for arbitrary constants
    #
    Value->Error("Is your answer the most general solution?") 
    if ( 
      Formula($stu->D('A'))==Formula(0) || 
      Formula($stu->D('B'))==Formula(0) 
    );

    ############################################
    #  Check for linear independence (Wronskian)
    #
    my $x = Real(1.24);

    my $a11 = $stu->eval(A=>1,B=>0,x=>$x,y=>0);
    my $a12 = $stu->eval(A=>0,B=>1,x=>$x,y=>0);
 
    my $a21 = $stu->D('x')->eval(A=>1,B=>0,x=>$x,y=>0);
    my $a22 = $stu->D('x')->eval(A=>0,B=>1,x=>$x,y=>0);

    my $wronskian = $a11*$a22 - $a21*$a12;

    Value->Error("Your functions are not linearly independent or your answer is not complete") 
    if ($wronskian==Real(0));

    ########################################################
    #  Check that the student answer is a solution to the DE
    #
    my $stux  = Formula($stu->D('x'));
    my $stuxx = Formula($stu->D('x','x'));
    my $stuDE = Formula($stuxx + $kk*$stu)
    ->with(test_points=>[[1,1,1,0],[1,1,0,0],[2,1,1,0],[1,2,0,0]]);

    return ($stuDE==Formula(0));

}));



ANS( $yinitvalprob->cmp() );


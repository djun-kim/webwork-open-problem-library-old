## DESCRIPTION
## Linear systems: Nonhomogeneous linear systems
## ENDDESCRIPTION

## KEYWORDS('Nonhomogeneous linear systems')

## DBsubject('Differential Equations')
## DBchapter('Linear systems')
## DBsection('Nonhomogeneous linear systems')
## Date('')
## Author('')
## Institution('Fort Lewis College')
## TitleText1('Elementary Differential Equations')
## EditionText1('2006')
## AuthorText1('Kohler and Johnson')
## Section1('4.8')
## Problem1('06')


##################################
#  Initialization


DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGmatrixmacros.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
#"MatrixUnimodular.pl",
"unionLists.pl"
);

TEXT(beginproblem());


##################################
#  Setup

Context("Numeric");
Context()->variables->are(
t=>"Real"
);
Context()->variables->set(t=>{limits=>[1,3]});


# Define real "pre-eigenvalues" for generating matrix A
$lambda1 = non_zero_random(-3,3,1);
do { $lambda2 = non_zero_random(-3,3,1); } until ($lambda2 != $lambda1);

do { $c = non_zero_random(-3,3,1); } until ($c != -1);
# Eigenvectors:  <c,-1>, <1,1>

$a[0][0] = $lambda2 + $lambda1*$c;
$a[0][1] = $lambda2*$c - $lambda1*$c;
$a[1][0] = $lambda2 - $lambda1;
$a[1][1] = $lambda1 + $lambda2*$c; 

# Redefine true eigenvalues of matrix A
$lambda1 = $lambda1*($c+1);
$lambda2 = $lambda2*($c+1);

# Initial conditions
$init1 = random(0,1,1);
$init2 = random(0,1,1);
 

# Correct complementary solution
$corv11 = Formula("e^($lambda1*t) * $c")->reduce;
$corv21 = Formula("e^($lambda1*t) * (-1)")->reduce;
$corv12 = Formula("e^($lambda2*t) * 1")->reduce;
$corv22 = Formula("e^($lambda2*t) * 1")->reduce;


$multianshom = MultiAnswer( $corv11, $corv21, $corv12, $corv22 )->with(
    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  "C1 &lt;%s, %s&gt; + C2 &lt;%s, %s&gt;",
    tex_format =>  "\text{\(C1\)} <%s, %s> + \text{\(C2\)} <%s, %s>" ,
    checker => sub {
        my ($correct, $student, $self ) = @_;
	my ($stuv11, $stuv21, $stuv12, $stuv22) = @{$student}[0..3];

        # if both vectors are nonempty but constants
        if ($stuv11) { 
             Value::Error('Your answers should be formulas, not constants')
             unless $stuv11->isFormula;
        }
        if ($stuv21) { 
             Value::Error('Your answers should be formulas, not constants')
             unless $stuv21->isFormula;
        }
        if ($stuv12) { 
             Value::Error('Your answers should be formulas, not constants')
             unless $stuv12->isFormula;
        }
        if ($stuv22) { 
             Value::Error('Your answers should be formulas, not constants')
             unless $stuv22->isFormula;
        }
            

        # if both vectors are nonempty and nonzero
        if ( 
             ($stuv11 && $stuv21 && $stuv12 && $stuv22) && 
             ($stuv11 != 0 || $stuv21 != 0) &&
             ($stuv12 != 0 || $stuv22 != 0)
           ) {
           if ( 
                (($corv11 * $stuv21 == $corv21 * $stuv11) && ($corv22 * $stuv12 == $corv12 * $stuv22)) ||  
                (($corv11 * $stuv22 == $corv21 * $stuv12) && ($corv22 * $stuv11 == $corv12 * $stuv21))  
              )
           { return 1; }
        }

        # if the left vector is nonempty and nonzero
        if ( ($stuv11 && $stuv21) && ($stuv11 != 0 || $stuv21 != 0) ) {
           if ( 
                ($corv11 * $stuv21 == $corv21 * $stuv11) ||
                ($corv12 * $stuv21 == $corv22 * $stuv11) 
              )
           { 
              $self->setMessage(1,"The vector on the left is correct.");
              return 0.67;
           }
        }

        # if the right vector is nonempty and nonzero
        if ( ($stuv12 && $stuv22) && ($stuv12 != 0 || $stuv22 != 0) ) {
           if (
                ($corv12 * $stuv22 == $corv22 * $stuv12) ||
                ($corv11 * $stuv22 == $corv21 * $stuv12) 
              )
           { 
              $self->setMessage(3,"The vector on the right is correct.");
              return 0.67;
           }
        }
       
        return 0;

    }
);


# Particular solution

do { $r = non_zero_random(-4,4,1) } until (
       $r != $lambda1 && $r != $lambda2 && $r * ($a[1][1] + $a[0][0] - $r) - $a[0][0]*$a[1][1] + $a[0][1]*$a[1][0] != 0
     );
# Vector g(t) = <e^(rt), 0>
# Guess solution of the form e^(rt)*<scalar1, scalar2>

$g1 = Formula("e^($r*t)")->reduce;
$scalar1 = Formula("($a[1][1] - $r)/($r * ($a[1][1] + $a[0][0] - $r) - $a[0][0]*$a[1][1] + $a[0][1]*$a[1][0])")->reduce;
$scalar2 = Formula("(-$a[1][0])/($r * ($a[1][1] + $a[0][0] - $r) - $a[0][0]*$a[1][1] + $a[0][1]*$a[1][0])")->reduce;

$coryp1 = $g1*$scalar1;
$coryp2 = $g1*$scalar2;

$multianspart = MultiAnswer( $coryp1, $coryp2 )->with(
    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  "<%s, %s>",
    tex_format =>  "<%s, %s>" ,
    checker => sub {
        my ($correct, $student, $self ) = @_;
	my ($stuyp1, $stuyp2) = @{$student}[0..1];

        # Check that the difference between correct particular solution and student particular solution
        # is a solution of the homogeneous equation.

        # if the vector is nonempty and nonzero
        if ( 
             ($stuyp1 && $stuyp2) && 
             ($stuyp1 != 0 || $stuyp2 != 0)
           ) {

             my $diff1 = Compute("$stuyp1 - $coryp1");
             my $diff2 = Compute("$stuyp2 - $coryp2");

             my $derivdiff1 = $diff1->D('t');
             my $derivdiff2 = $diff2->D('t');

           if ( 
                ($a[0][0]*$diff1 + $a[0][1]*$diff2 == $derivdiff1) && 
                ($a[1][0]*$diff1 + $a[1][1]*$diff2 == $derivdiff2) 
              )
           { return 1; }
        }
        
        return 0;
   }
);


#IVP solution
$ivpc1 = ($init1 - $scalar1 - $scalar2)/2;
$ivpc2 = ($init2 - $scalar1 + $scalar2)/2;

$ivpy1 = $coryp1 + $ivpc1*$corv11 + $ivpc2*$corv12;
$ivpy2 = $coryp2 + $ivpc1*$corv21 + $ivpc2*$corv22;


#######################################
#  Main text

Context()->texStrings;
BEGIN_TEXT

Consider the initial value problem
\[
\displaystyle
\ \vec{\bf y}^{\, \prime}
=
\left\lbrack
\begin{array}{rr}
$a[0][0] & $a[0][1] \\
$a[1][0] & $a[1][1]
\end{array} 
\right\rbrack
\vec{\bf y}
+ \left\lbrack
\begin{array}{c}
$g1 \\
0
\end{array} 
\right\rbrack, 
\quad \quad
\vec{\bf y}_0
= \left\lbrack
\begin{array}{c}
$init1 \\
$init2
\end{array} 
\right\rbrack.
\]

\{ BeginList('OL',type=>'a') \}

$ITEMSEP
$ITEM Form the complementary solution to the homogeneous equation.
$BR
$BR
\{ 
mbox(
[
' \( \vec{\bf y}_C(t) = C_1 \)', 
display_matrix([[$multianshom->ans_rule(15)],[$multianshom->ans_rule(15)]]),
' \( + \ C_2 \) ', 
display_matrix([[$multianshom->ans_rule(15)],[$multianshom->ans_rule(15)]]),
],
allowbreaks=>'yes'
) 
\}

$ITEMSEP
$ITEM Construct a particular solution by assuming the form \( \vec{\bf y}_P(t) = $g1 \vec{\bf a} \) and solving for the undetermined constant vector \( \vec{\bf a} \).
$BR
$BR
\{ 
mbox(
[
'\( \vec{\bf y}_P(t) = \)',
display_matrix([[$multianspart->ans_rule(15)],[$multianspart->ans_rule(15)]]),
],
allowbreaks=>'yes'
) 
\}

$ITEMSEP
$ITEM Form the general solution \( \vec{\bf y}(t) = \vec{\bf y}_C(t) + \vec{\bf y}_P(t) \), and impose the initial condition to obtain the solution of the initial value problem.
$BR
$BR
\{
mbox(
[
display_matrix([['\( y_1(t) \)'],['\( y_2(t) \)']]),
'\( = \)',
display_matrix([[ans_rule(30)],[ans_rule(30)]]),
],
allowbreaks=>'yes'
)
\}

\{ EndList('OL',type=>'a') \}
END_TEXT
Context()->normalStrings;


###################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS( $multianshom->cmp() );
ANS( $multianspart->cmp(diagnostics=>1) );
ANS( $ivpy1->cmp() );
ANS( $ivpy2->cmp() );

COMMENT('MathObject version. Complex eigenvalues with negative real part -1 +/- b i.');

ENDDOCUMENT();


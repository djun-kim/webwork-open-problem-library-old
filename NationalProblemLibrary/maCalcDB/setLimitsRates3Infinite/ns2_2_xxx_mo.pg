##DESCRIPTION
##  Determine one-sided infinite limits around points where
##  the functions are undefined; list of 4 limits is presented
##ENDDESCRIPTION

##KEYWORDS('limits', 'infinite', 'one-sided')
## tsuda tagged and PAID on 2-20-2004

## DBsubject('Calculus')
## DBchapter('Limits and Derivatives')
## DBsection('The Limit of a Function')
## Date('6/3/2002')
## Author('')
## Institution('')
## TitleText1('Calculus: Early Transcendentals')
## EditionText1('6')
## AuthorText1('Stewart')
## Section1('2.2')
## Problem1('21,23,22,24')
DOCUMENT();
loadMacros(
   "PGstandard.pl",      # Standard macros for PG language
   "PGchoicemacros.pl",
   "MathObjects.pl",
   "unionTables.pl",        # for customized match set up
   "PGcourse.pl",        # Customization file for the course
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;
# don't allow guessing


##############################################################
#
#  Setup
#
#
$ml = new_select_list();

#load up question, answer pairs
$ml->qa(
"\( \displaystyle \lim_{ x \rightarrow 3^{-}} \frac{2}{x-3} \)" 
   => "-infinity",
"\( \displaystyle \lim_{ x \rightarrow 3^{+}} \frac{2}{x-3} \)" 
   => 'inf',
"\( \displaystyle \lim_{ x \rightarrow 5} \frac{2}{(x-5)^{6}} \)" 
   => 'inf',
"\( \displaystyle \lim_{ x \rightarrow 5^{-}} \frac{2}{(x-5)^{3}} \)" 
   => -inf,
"\( \displaystyle \lim_{ x \rightarrow -7^{-}} \frac{1}{x^{2}(x+7)} \)" 
   => "-inf",
"\( \displaystyle \lim_{ x \rightarrow 0} \frac{1}{x^{2}(x+7)} \)" 
   => "inf" 
);

$ml->choose(6); # choose 4 of the questions as random


##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
Determine the infinite limit of the
following functions.  Enter   infinity for \( \infty \) and
-infinity for \( -\infty \).

\{ $ml->print_q; # print the list of questions \}

END_TEXT
Context()->normalStrings;


##############################################################
#
#  Answers
#
#



ANS($ml->cmp);

# all or nothing grading (otherwise you get hints for finding the answer)
install_problem_grader(~~&std_problem_grader);



COMMENT('MathObject version');

COMMENT('MathObject version');
ENDDOCUMENT();



# new style "MathObject" cmp routine replaces old methods
# of checking answers (need new version of List.pm)

# older methods for checking the answer

# Unfortunately $ml produces a reference to an array and not an array so we 
# we need to unpack the reference and find the AnswerEvaluator (via ->cmp)
# for each answer. Here is the foreach loop method of doing this

#foreach $val (@{$ml->ra_correct_ans}) {
#     warn "val is $val";
#    if (ref($val) =~/Value/) {
#        #ANS($val->cmp);
#    } else {
#    warn "val is ".pretty_print($val);
#    }
#}

# This is the functional programming notation for doing the same thing
# It's neater once you are used to it.

#ANS( map {$_->cmp} @{$ml->ra_correct_ans} );

# $ml->ra_correct_ans is a pointer to the array
# @{$ml->ra_correct_ans} is the array itself
# and the "map" construct asks each element of the array
# to report its comparison subroutines
# the array of comparison subroutines is entered into the ANS queue.



##DESCRIPTION
## Introduction to Functions
## 
##ENDDESCRIPTION
## DBsubject('Intermediate Algebra')
## DBchapter('Ch 02: Functions and Linear Functions')
## DBsection('Introduction to Functions')
## KEYWORDS('functions')
## TitleText1('Essentials of Intermediate Algebra')
## EditionText1('1')
## AuthorText1('Blitzer')
## Section1('2.1')
## Problem1('')
## Author('RA Cruz')
## Institution('The College of Idaho')
## Date: 2007/09

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "contextInequalitiesAllowStrings.pl",
  "answerHints.pl",
  "PGnauGraphics.pl"
);

TEXT(beginproblem);

######################################
#  Setup

Context("Numeric");

#--------Define the function-----------

$a=random(1,3,1);
$c=random(1,4,1);
$b=1/$c;
$pi=4*arctan(1);
$f = Formula("$a*sin($pi*$b*x)");

#--------Define the graph--------------

$choose = random(0,2,1);
@colors = ("blue", "red", "green");
$rc = $colors[$choose];   #Pick a random color

$xmax = 3*$c;
$ymax = 4;
$xmin = -1*$xmax;
$ymin = -1*$ymax;

$graph = init_graph_no_labels($xmin,$ymin,$xmax,$ymax,
                             'axes'=>[0,0],'grid'=>[$xmax-$xmin,$ymax-$ymin]);
$f_graph = FEQ("$f for x in <$xmin,$xmax> using color:blue and weight:3");
add_functions( $graph, $f_graph);
$label = new Label($xmin+2,$ymax-.5, "y = f(x)",'black','center');
$graph->lb($label);

$i = 0;           # Number the axes
do {
  $xtick = $i + $xmin + 1;
  $labelx[$i] = new Label($xtick,0, "$xtick",'black','center');
  if ($xtick!=0) {$graph->lb($labelx[$i]);}
  $i =$i+1;
} while ($i<($xmax-$xmin)-1);

$i = 0;
do {
  $ytick = $i +$ymin + 1;
  $labely[$i] = new Label(-.2,$ytick+.1, "$ytick",'black','center');
  if ($ytick!=0) {$graph->lb($labely[$i]);} 
  $i =$i+1;
} while ($i<($ymax-$ymin)-1);

#------------Pick the points---------------

$xnum1 = $c * random(-1.5,1.5,0.5);
$xnum2 = $xnum1 + $c*non_zero_random(-1.5,1.5,1);
@numbers = ($xnum1,$xnum2);
@slice = NchooseK(2,2);
@input = @numbers[@slice];

######################################
#  Main text (part 1)
#  Note:  tex_size=>n is for the size on the hardcopy: 600=60%

BEGIN_TEXT
\{ Plot($graph,tex_size=>600) \} 
$BR $BR
Use the graph of \(y = f(x)\) given above to find:
$PAR
a) \(f($input[0]) = \) \{ans_rule(10)\}
$PAR
b) \(f($input[1]) = \) \{ans_rule(10)\}
END_TEXT

######################################
#  Answers  (part 1)

Context()->strings->add("No solution"=>{},
                        "Not defined"=>{},
                        "Does not exist"=> {},
                        "All real numbers"=>{});

$ans_a = $f->eval(x=>$input[0])->with(tolerance=>0.15, tolType=>'absolute');
ANS($ans_a->cmp(ignoreStrings => 1));

$ans_b = $f->eval(x=>$input[1])->with(tolerance=>0.15, tolType=>'absolute');
ANS($ans_b->cmp(ignoreStrings => 1));

######################################
#  Main text (part 2)

BEGIN_TEXT
$PAR
c) The domain of \(f\): \{ans_rule(20)\}
$PAR
d) The range of \(f\): \{ans_rule(20)\}
END_TEXT

######################################
#  Answers  (part 2)
#  Note:  The context is changed to inequalites that allow 
#         "All real numbers" as an alias for "R" in a customized 
#         context.
#  Note:  The PostFilter check is to make sure the inequality has the 
#         correct variable. The comparison is to -infinity<x<infinity, 
#         so the check is only done if the student's answer is in 
#         inequality form.

Context("Inequalities-AllowStrings");
Context()->variables->add(y=>'Real');

$ans_c = Compute("All real numbers");
ANS($ans_c->cmp->withPostFilter(AnswerHints(
            sub {
                my ($correct,$student,$ans) = @_;
                return $student =~ /y/ && $student=~/[<>]/;
                } => ["Use the variable $BITALIC x $EITALIC for the domain of a function.", 
                      checkCorrect => 1, 
                      score => 0]
)));

$ans_d = Compute("-$a<=y<=$a");
ANS($ans_d->cmp->withPostFilter(AnswerHints(
            sub {
                my ($correct,$student,$ans) = @_;
                return $student =~ /x/;
                } => ["Use the variable $BITALIC y $EITALIC for the range of a function.", 
                      checkCorrect => 1, 
                      score => 0]
)));

$showPartialCorrectAnswers = 1;

######################################

ENDDOCUMENT(); # This should be the last executable line in the problem.

## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS ('linear algebra','matrix','eigenvalue','eigenvector')
## Tagged by cmd6a 4/30/06

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Rochester')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "MathObjects.pl"
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

Context('Matrix');

# create an invertible matrix with det either 1  or -1

$a11 = random(-1,1,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);

$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;

$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;

$det = - $a31 * $m * $n;

# define matrix

$a = Matrix([[$a11, $a12, $a13],[$a21, $a22, $a23],[$a31,$a32,$a33]]);

#	$a->assign(1,1, $a11 );
#	$a->assign(1,2, $a12 );
#	$a->assign(1,3, $a13 );
#	$a->assign(2,1, $a21 );
#	$a->assign(2,2, $a22 );
#	$a->assign(2,3, $a23 );
#	$a->assign(3,1, $a31 );
#        $a->assign(3,2, $a32 );
#        $a->assign(3,3, $a33 );
#	$a_lr = $a->decompose_LR();
#	$a_det = $a_lr->det_LR();

# define inverse matrix
#	$b = $a_lr->invert_LR();
    $b = $a->inverse();

# define eigenvalues
#    $e = new Matrix(3,3);
#    $e->one();
#    $e->assign(1,1, random(-5,-2,1));
#    $e->assign(2,2, random(-1,1,1));
#    $e->assign(3,3, random(2,5,1));
$e = Matrix([[random(-5,-2,1),0,0],[0,random(-1,1,1),0],[0,0,random(2,5,1)]]);

# define eigenvectors
#	$v1 = new Matrix(3,1);
#	$v1->assign(1,1, $a11);
#        $v1->assign(2,1, $a21);
#        $v1->assign(3,1, $a31);
#        	$v2 = new Matrix(3,1);
#        	$v2->assign(1,1, $a12);
#        	$v2->assign(2,1, $a22);
#        	$v2->assign(3,1, $a32);
#        $v3 = new Matrix(3,1);
#        $v3->assign(1,1, $a13);
#        $v3->assign(2,1, $a23);
#        $v3->assign(3,1, $a33);

# define final matrix
	$matrix = $a * $e *$b;
#	$matrix_lr = $matrix->decompose_LR();
#	$matrix_det = $matrix_lr->det_LR();

Context()->texStrings;

# These links are broken
#You can use the web version at
#\{htmlLink("/webwork2_files/applets/xFunctions/xFunctions.html","xFunctions",q!TARGET="plotter"!)\}. 
#Also, You can use this \{htmlLink("/webwork2_files/applets/matrix_row_tool.html",
#"row reduction tool", q!TARGET = "row_reduction"!) \} to help with the calculations.]

BEGIN_TEXT

Find the eigenvalues of the matrix \($matrix\). 
$BR
$BR
$BBOLD Note: $EBOLD you may want to use a graphing calculator to estimate the roots of the polynomial which defines
the eigenvalues. 
$BR
$BR
The eigenvalues are \( \lambda_1 < \lambda_2 < \lambda_3 \), where 
$BR
$BR
\( \lambda_1 = \) \{ans_rule(10)\}
$BR
Associated eigenvector \( =  \) 
\{ans_rule(30)\}
$BR
$BR
\( \lambda_2 = \) \{ ans_rule(10) \}
$BR
Associated  eigenvector  \( = \)  
\{ans_rule(30)\}
$BR
$BR
\( \lambda_3 = \) \{ ans_rule(10) \}
$BR
Associated  eigenvector  \( = \)  
\{ans_rule(30)\}

$BR$BR
$BBOLD Note: $EBOLD vectors are entered with "angle brackets", such
as <1, 2, 3> or <0, -4, 6>.

END_TEXT

Context('Vector');

sub ismult {
  my ( $correct, $student, $ansHash) = @_;
  if ($student->isZero) {
    Value->Error("Eigenvectors cannot be zero");
    return 0;
  }
  return 1 if($correct->isParallel($student)) ;
}

$v1 = Vector([$a11, $a21, $a31]);
$v2 = Vector([$a12, $a22, $a32]);
$v3 = Vector([$a13, $a23, $a33]);
	
ANS(num_cmp($e->element(1,1),tol=>.01));
ANS($v1->cmp( checker => ~~&ismult ) );
	
ANS(num_cmp($e->element(2,2),tol=>.01));
ANS($v2->cmp( checker => ~~&ismult ) );

ANS(num_cmp($e->element(3,3),tol=>.01));
ANS($v3->cmp( checker => ~~&ismult ) );


ENDDOCUMENT() ;        




##DESCRIPTION
##KEYWORDS('matrix', 'eigenvalue', 'eigenvector', 'eigenspace', 'basis')
##
##ENDDESCRIPTION

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$a= new Matrix(3,3);

# create an invertible matrix with det either 1  or -1

$a11 = random(-2,2,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);

$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;

$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;

$det = - $a31 * $m * $n;

# define matrix

        $a->assign(1,1, $a11 );
        $a->assign(1,2, $a12 );
        $a->assign(1,3, $a13 );   
        $a->assign(2,1, $a21 );
        $a->assign(2,2, $a22 );
        $a->assign(2,3, $a23 );
        $a->assign(3,1, $a31 );
        $a->assign(3,2, $a32 );
        $a->assign(3,3, $a33 );
        $a_lr = $a->decompose_LR();
        $a_det = $a_lr->det_LR();

# define inverse matrix
        $b = $a_lr->invert_LR();

# define eigenvalue
	$eig1 = random(0,1,1) * non_zero_random(-5,5,1);	
	if ($eig1 == 0) { $eig2 = non_zero_random(-4,4,1); } else { $eig2 = 0; }
    	$e = new Matrix(3,3);
	$e->one();
	$e->assign(1,1, $eig1);
	$e->assign(2,2, $eig2);
	$e->assign(3,3, $eig2);

# define final matrix
        $matrix = $a * $e *$b;
# round off entries
for($j=1; $j<4; $j++) {
for($k=1; $k<4; $k++) {
   $matrix->assign($j, $k, round($matrix->element($j, $k)));
}}

        $matrix_lr = $matrix->decompose_LR();
        $matrix_det = $matrix_lr->det_LR();


BEGIN_TEXT

\{ mbox( 'The matrix \(A=\)', display_matrix($matrix) ) \}
$BR
has two real eigenvalues, one of multiplicity \(1\) and one of multiplicity \(2\). 
Find the eigenvalues and a basis of each eigenspace. 
$BR
\(\lambda_1\) = \{ans_rule(10)\} has multiplicity \(1\),
$BR
\{ mbox( 'Basis:', ans_array(3,1,5), ',' ) \}
$BR
\(\lambda_2\) = \{ans_rule(10)\} has multiplicity \(2\),
$BR
\{ mbox( 'Basis:', ans_array(3,1,5), ', ', ans_array_extension(3,1,5), '.' ) \}

END_TEXT

ANS(num_cmp($eig1));
ANS(basis_cmp([[$a11, $a21, $a31]]));

ANS(num_cmp($eig2));
ANS(basis_cmp([[$a12, $a22, $a32], [$a13, $a23, $a33]]));


ENDDOCUMENT();       # This should be the last executable line in the problem.


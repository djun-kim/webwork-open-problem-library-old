## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS ('linear algebra','matrix','eigenvalue','eigenspace')
## Tagged by cmd6a 4/30/06

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Rochester')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$a= new Matrix(3,3);

# create an invertible matrix with det either 1  or -1

$a11 = random(-2,2,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);

$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;

$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;

$det = - $a31 * $m * $n;

# define matrix

        $a->assign(1,1, $a11 );
        $a->assign(1,2, $a12 );
        $a->assign(1,3, $a13 );   
        $a->assign(2,1, $a21 );
        $a->assign(2,2, $a22 );
        $a->assign(2,3, $a23 );
        $a->assign(3,1, $a31 );
        $a->assign(3,2, $a32 );
        $a->assign(3,3, $a33 );
        $a_lr = $a->decompose_LR();
        $a_det = $a_lr->det_LR();

# define inverse matrix
        $b = $a_lr->invert_LR();

# define eigenvalues 

        $e = new Matrix(3,3);
        $e->one();

$eig = random(-4,4,1);
$e->assign(1,1, $eig);
$mult = random(1,3,2);	
$m = non_zero_random(-2,2,1);

	if ($mult == 1) { 
	$e->assign(2,2, 0);
	$e->assign(2,3, $m);
	$e->assign(3,2, - $m);
	$e->assign(3,3, 0);
	$dim = 1;
} else { 
	$dim = random(1,2,1);
	$e->assign(2,2, $eig);
	$e->assign(3,3, $eig);
	$e->assign(2,3, $m);
	if ($dim == 1) { 
		$n = non_zero_random(-2,2,1);
		$e->assign(1,2, $n);
	} 
}

# define final matrix
        $matrix = $a * $e *$b;
        $matrix_lr = $matrix->decompose_LR();
        $matrix_det = $matrix_lr->det_LR();

# matrix entries are integers, but we'll round them to avoid printing 0.999999999

foreach $i (1..3) { 
	foreach $j (1..3) { 
		$m[$i][$j] = $matrix->element($i,$j); 
		$m[$i][$j] = round($m[$i][$j]);
		$matrix->assign($i,$j,$m[$i][$j]);
	}
}

BEGIN_TEXT

\{ mbox( 'The matrix \(A=\)', display_matrix($matrix) ) \}
$BR
has one real eigenvalue. Find this eigenvalue, its multiplicity, and the dimension of the corresponding eigenspace. 
$BR
eigenvalue = \{ans_rule(10)\},
$BR
multiplicity = \{ans_rule(10)\},
$BR
dimension of the eigenspace = \{ans_rule(10)\}.
$BR
Is the matrix \(A\) defective? (Type "yes" or "no") \{ans_rule(10)\}.

END_TEXT

ANS(num_cmp($eig));
ANS(num_cmp($mult));
ANS(num_cmp($dim));
ANS(str_cmp('yes'));

ENDDOCUMENT();       # This should be the last executable line in the problem.


##DESCRIPTION
##KEYWORDS('matrix', 'eigenvalue', 'eigenspace', 'dimension', 'multiplicity')
##
##ENDDESCRIPTION

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl", 
"PGcomplexmacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$A= new Matrix(4,4);

# create an invertible matrix with det either 1  or -1

$a[1][1] = random(-2,2,1);
$a[2][1] = random(-1,1,2);
$a[3][1] = random(-1,1,2);
$a[4][1] = random(-1,1,1);

$b1 = random(-1,1,2);
foreach $i (1..4) { 
	$a[$i][2] = $b1 * $a[$i][1];
}
$p = random(-1,1,2);
$a[2][2] = $a[2][2] + $p;

$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
foreach $i (1..4) {
	$a[$i][3] = $c * $a[$i][1] + $d * $a[$i][2];
}
$n = random(-1,1,2);
$a[1][3] = $a[1][3] + $n;

$f = random(-1,1,2);
$g = random(-1,1,1);
$h = random(-1,1,1);
foreach $i (1..4) {
	$a[$i][4] = $f * $a[$i][1] + $g * $a[$i][2] + $h * $a[$i][3];  
}
$q = random(-1,1,2);
$a[4][4] = $a[4][4] + $q;

$det = - $a[3][1] * $p * $n * $q;

# define matrix

foreach $i (1..4) {
	foreach $j (1..4) {
 	       $A->assign($i,$j, $a[$i][$j]);
	}
}

        $A_lr = $A->decompose_LR();
        $A_det = $A_lr->det_LR();

# define inverse matrix
        $b = $A_lr->invert_LR();

# define eigenvalues 

        $e = new Matrix(4,4);
        $e->one();

$eig = non_zero_random(-4,4,1);
$e->assign(1,1, $eig);
$e->assign(4,4, 0);
$case = random(1,8,1);
	
if ($case == 1) { 
	$mult1 = 1;
	$mult2 = 1;
	$dim1 = 1;
	$dim2 = 1;

	$m = random(-1,1,2);
	$e->assign(2,2, 0);
	$e->assign(2,3, $m);
	$e->assign(3,2, - $m);
	$e->assign(3,3, 0);
} 

if ($case == 2) {
        $mult1 = 1;
        $mult2 = 3;
        $dim1 = 1;
        $dim2 = 1;
 
	$m = non_zero_random(-2,2,1);
	$e->assign(2,2, 0);
        $e->assign(2,3, $m);
	$e->assign(3,3, 0);
        $e->assign(3,4, $m);
} 

if ($case == 3) {
        $mult1 = 1;
        $mult2 = 3;
        $dim1 = 1;
        $dim2 = 2;
        $m = non_zero_random(-2,2,1);
        $e->assign(2,2, 0);
        $e->assign(2,3, $m);
        $e->assign(3,3, 0);
}

if ($case == 4) {
        $mult1 = 1;
        $mult2 = 3;
        $dim1 = 1;
        $dim2 = 3;
        $e->assign(2,2, 0);
        $e->assign(3,3, 0);
}

if ($case == 5) {
        $mult1 = 2;
        $mult2 = 2;
        $dim1 = 1;
        $dim2 = 1;
        $m = non_zero_random(-2,2,1);
        $e->assign(2,2, $eig);
        $e->assign(1,2, $m);
        $e->assign(3,3, 0);
        $e->assign(3,4, $m);
}

if ($case == 6) {
        $mult1 = 2;
        $mult2 = 2;
        $dim1 = 1;
        $dim2 = 2;
        $m = non_zero_random(-2,2,1);
        $e->assign(2,2, $eig);
        $e->assign(1,2, $m);
        $e->assign(3,3, 0);
}

if ($case == 7) {
        $mult1 = 2;
        $mult2 = 2;
        $dim1 = 1;
        $dim2 = 2;
        $m = non_zero_random(-2,2,1);
        $e->assign(2,2, $eig);
        $e->assign(3,3, 0);
        $e->assign(3,4, $m);
}

if ($case == 8) {  
        $mult1 = 2;
        $mult2 = 2;
        $dim1 = 2;
        $dim2 = 2;
        $e->assign(2,2, $eig);
        $e->assign(3,3, 0);
}

# define final matrix
        $matrix = $A * $e *$b;
        $matrix_lr = $matrix->decompose_LR();
        $matrix_det = $matrix_lr->det_LR();

# matrix entries are integers, but sometimes are printed as *e-16 or something like that. 
# to avoid this, we will round each entry

foreach $i (1..4) { 
	foreach $j (1..4) { 
		$m[$i][$j] = $matrix->element($i,$j);
		$m[$i][$j] = round($m[$i][$j]);
		$matrix -> assign($i,$j,$m[$i][$j]);  
  	}
}

BEGIN_TEXT
 
\{ mbox( 'The matrix \(A=\)', display_matrix($matrix), '.' ) \}
$BR
has two real eigenvalues \(\lambda_1 < \lambda_2\). Find these eigenvalues, their multiplicities, and dimensions of the
corresponding eigenspaces. 
$BR
\(\lambda_1=\) \{ans_rule(5)\} has multiplicity \{ans_rule(5)\}. 
The dimension of the corresponding eigenspace is \{ans_rule(5)\}. 
$BR
\(\lambda_2=\) \{ans_rule(5)\} has multiplicity \{ans_rule(5)\}. 
The dimension of the corresponding eigenspace is \{ans_rule(5)\}.

END_TEXT

if ($eig<0) { 
	ANS(num_cmp($eig));  ANS(num_cmp($mult1));  ANS(num_cmp($dim1)); 
	ANS(num_cmp(0));  ANS(num_cmp($mult2));  ANS(num_cmp($dim2));
} else {
	ANS(num_cmp(0));  ANS(num_cmp($mult2));  ANS(num_cmp($dim2));
	ANS(num_cmp($eig));  ANS(num_cmp($mult1));  ANS(num_cmp($dim1));
}

ENDDOCUMENT();       # This should be the last executable line in the problem.


## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS ('linear algebra','matrix','eigenvalue')
## Tagged by cmd6a 4/30/06

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Rochester')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl", 
"PGcomplexmacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$A= new Matrix(4,4);

# create an invertible matrix with det either 1  or -1

$a[1][1] = random(-2,2,1);
$a[2][1] = random(-1,1,2);
$a[3][1] = random(-1,1,2);
$a[4][1] = random(-1,1,1);

$b1 = random(-1,1,2);
foreach $i (1..4) { 
	$a[$i][2] = $b1 * $a[$i][1];
}
$p = random(-1,1,2);
$a[2][2] = $a[2][2] + $p;

$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
foreach $i (1..4) {
	$a[$i][3] = $c * $a[$i][1] + $d * $a[$i][2];
}
$n = random(-1,1,2);
$a[1][3] = $a[1][3] + $n;

$f = random(-1,1,2);
$g = random(-1,1,1);
$h = random(-1,1,1);
foreach $i (1..4) {
	$a[$i][4] = $f * $a[$i][1] + $g * $a[$i][2] + $h * $a[$i][3];  
}
$q = random(-1,1,2);
$a[4][4] = $a[4][4] + $q;

$det = - $a[3][1] * $p * $n * $q;

# define matrix

foreach $i (1..4) {
	foreach $j (1..4) {
 	       $A->assign($i,$j, $a[$i][$j]);
	}
}

        $A_lr = $A->decompose_LR();
        $A_det = $A_lr->det_LR();

# define inverse matrix
        $b = $A_lr->invert_LR();

# define eigenvalues 

        $e = new Matrix(4,4);
        $e->one();

$eig1 = 0;
$eig2 = non_zero_random(-4,4,1);
$e->assign(1,1, $eig1);
$e->assign(2,2, $eig2);
$num = random(2,4,1);
	
if ($num == 2) { 
	$m = non_zero_random(-2,2,1);
	$e->assign(3,3, 0);
	$e->assign(3,4, $m);
	$e->assign(4,3, - $m);
	$e->assign(4,4, 0);
} 

if ($num == 3) { 
	$eig3 = non_zero_random(-4,4,1);
	if ($eig3 == $eig2) { $eig3 = - $eig3; } 
	$e->assign(3,3, $eig3);
	$e->assign(4,4, 0);
} 

if ($num == 4) {
	$eig1 = random(-1,1,2);  
	if (abs($eig1) == abs($eig2)) { $eig2 = random(-2,2,4);}
	$e->assign(1,1, $eig1);
	$eig3 = - $eig1;
	$e->assign(3,3, $eig3);
	$eig4 = - $eig2;
	$e->assign(4,4, $eig4);
}

# define final matrix
        $matrix = $A * $e *$b;
        $matrix_lr = $matrix->decompose_LR();
        $matrix_det = $matrix_lr->det_LR();

# matrix entries are integers, but sometimes are printed as *e-16 or something like that. 
# to avoid this, we will round each entry

foreach $i (1..4) { 
	foreach $j (1..4) { 
		$m[$i][$j] = $matrix->element($i,$j);
		$m[$i][$j] = round($m[$i][$j]);
		$matrix -> assign($i,$j,$m[$i][$j]);  
  	}
}

BEGIN_TEXT

Find the eigenvalues of the matrix 
$BR
\{ mbox( '\(A=\)', display_matrix($matrix), '.' ) \}
$BR
Place all your answers in the following blank, separated by commas. 
$BR
\{ans_rule(20)\}

END_TEXT

if ($num == 2) { ANS(multi_cmp( [ num_cmp($eig1), num_cmp($eig2) ] ) ); } 
if ($num == 3) { ANS(multi_cmp( [ num_cmp($eig1), num_cmp($eig2), num_cmp($eig3) ] ) ); }
if ($num == 4) { ANS(multi_cmp( [ num_cmp($eig1), num_cmp($eig2), num_cmp($eig3), num_cmp($eig4) ] ) ); }

ENDDOCUMENT();       # This should be the last executable line in the problem.


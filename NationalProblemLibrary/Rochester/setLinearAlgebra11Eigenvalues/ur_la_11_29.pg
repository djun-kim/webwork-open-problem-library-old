##DESCRIPTION
##KEYWORDS('matrix', 'eigenvalue', 'multiplicity', 'eigenspace', 'basis', 'orthogonal', Gram-Schmidt')
##
##ENDDESCRIPTION

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$a= new Matrix(3,3);

# create an invertible matrix with det either 1  or -1

$a11 = non_zero_random(-2,2,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);

$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;

$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;

$det = - $a31 * $m * $n;

# define matrix

        $a->assign(1,1, $a11 );
        $a->assign(1,2, $a12 );
        $a->assign(1,3, $a13 );   
        $a->assign(2,1, $a21 );
        $a->assign(2,2, $a22 );
        $a->assign(2,3, $a23 );
        $a->assign(3,1, $a31 );
        $a->assign(3,2, $a32 );
        $a->assign(3,3, $a33 );
        $a_lr = $a->decompose_LR();
        $a_det = $a_lr->det_LR();

# define inverse matrix
        $b = $a_lr->invert_LR();

# define eigenvalues 

        $e = new Matrix(3,3);
        $e->one();

$eig1 = non_zero_random(-4,4,1);
$eig2 = random(-4,4,1);
if ($eig1 == $eig2) { $eig2 = $eig2+1;}
	$e->assign(1,1, $eig1);
	$e->assign(2,2, $eig1);
	$e->assign(3,3, $eig2);

# define final matrix
        $matrix = $a * $e *$b;
        $matrix_lr = $matrix->decompose_LR();
        $matrix_det = $matrix_lr->det_LR();

# matrix entries are integers, but we'll round them to avoid printing 0.999999999

foreach $i (1..3) { 
	foreach $j (1..3) { 
		$m[$i][$j] = $matrix->element($i,$j); 
		$m[$i][$j] = round($m[$i][$j]);
		$matrix->assign($i,$j,$m[$i][$j]);
	}
}

BEGIN_TEXT

\{ mbox( 'The matrix \(A=\)', display_matrix($matrix) ) \}

$BR
has two real eigenvalues, \(\lambda_1 = $eig1\) of multiplicity \(2\), and \(\lambda_2 = $eig2\) of multiplicity \(1\). 
Find an orthonormal basis for the eigenspace \(E_1\).
$BR
\{ mbox( ans_array(3,1,15), ', ', ans_array_extension(3,1,15), '.' ) \}

END_TEXT

# a basis of the eigern space
$col1 = $a -> column(1);
$col2 = $a -> column(2);
# now apply Gram-Schmidt'
$scalar = ($col1->scalar_product($col2))/($col1->scalar_product($col1));
$col2 = $col2 - $scalar*$col1;
# now make them unit vectors
$norm1 = $col1->length;
$col1 = (1/$norm1)*$col1;
$norm2 = $col2->length;
$col2 = (1/$norm2)*$col2;


ANS(basis_cmp([$col1,$col2], 'mode'=>'orthonormal', 'help'=>'verbose'));

ENDDOCUMENT();       # This should be the last executable line in the problem.


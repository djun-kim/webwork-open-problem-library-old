##DESCRIPTION
##KEYWORDS('limit','definition', 'left limit')
##  Find the derivative of an oracle function using 
##  the definition of the derivative.
##ENDDESCRIPTION
&DOCUMENT();

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGnumericalmacros.pl",
           ); 


# define function1 to be evaluated
$a1= random(-3,3,0.1);
$b1= random(-3,3,0.1);
$c1 = random(-3,3,0.1);


$f1_str = FEQ(" ${a1}x^2+${b1}x +$c1 ");
$f1 = sub {
	my $x = shift;
	$a1*$x*$x + $b1*$x +$c1;
};

# define function2 to be evaluated
$a2= random(-3,3,0.1);
$b2= random(-3,3,0.1);
$c2 = random(-3,3,0.1);


$f2_str = FEQ(" ${a2}x^2+${b2}x +$c2 ");
$f2 = sub {
	my $x = shift;
	$a2*$x*$x + $b2*$x +$c2;
};

# define function3 to be evaluated
$a3= random(-3,3,0.1);
$b3= random(-3,3,0.1);
$c3 = random(-3,3,0.1);


$f3_str = FEQ(" ${a3}x^2+${b3}x +$c3 ");
$f3 = sub {
	my $x = shift;
	$a3*$x*$x + $b3*$x +$c3;
};



$llimit = -5; $rlimit = 5;
$del = .05;
$x0=random($llimit+$del,$rlimit-$del , .01);

#  Calculate the cubic spline approximation

my $num_of_intervals = 500;  # number of interpolation points
my $delta =  ($rlimit-$llimit)/($num_of_intervals); 
my (@x_values, @y_values);
foreach my $i (0..$num_of_intervals) {
	my $x = $llimit + $delta*$i;
	my $y1 = &$f1($x);
	my $y2 = &$f2($x);
	my $y3 = &$f3($x);
	push(@x_values, $x); push(@y1_values,$y1); push(@y2_values,$y2); push(@y3_values,$y3)
}

$one =     random(1,3,1);
$two =     random(1,3,1);
$three =   random(1,3,1);

HEADER_TEXT(javaScript_cubic_spline(~~@x_values,~~@y1_values, name => 'func1', llimit => $llimit, rlimit => $rlimit) );
HEADER_TEXT(javaScript_cubic_spline(~~@x_values,~~@y2_values, name => 'func2', llimit => $llimit, rlimit => $rlimit) );
HEADER_TEXT(javaScript_cubic_spline(~~@x_values,~~@y3_values, name => 'func3', llimit => $llimit, rlimit => $rlimit) );

$f1_approx = cubic_spline(~~@x_values, ~~@y1_values);
$f2_approx = cubic_spline(~~@x_values, ~~@y2_values);
$f3_approx = cubic_spline(~~@x_values, ~~@y3_values);

$left_limit  = PG_restricted_eval( qq{ ~~&~~$f${one}_approx($x0)  });
$value       = PG_restricted_eval( qq{ ~~&~~$f${two}_approx($x0)  }); 
$right_limit = PG_restricted_eval( qq{ ~~&~~$f${three}_approx($x0)  });

HEADER_TEXT(<<EOF);
<SCRIPT LANGUAGE="JavaScript">
<!-- Begin
function func(x) {
	if ( x < $x0 ) {   //determines whether the function is left or right continuous.
	   return( func$one(x) );
	} else if ( x == $x0 ) {
	  return( func$two(x)  );
	} else if ( x > $x0 ) {
	  return( func$three(x) );
	} else {
	  // do nothing if error.
	}
}
-->
</SCRIPT>

EOF
TEXT(beginproblem());

# A warning that we are using javaScript
TEXT(MODES(
TeX => "",
Latex2HTML => "\begin{rawhtml}
      <NOSCRIPT>{\bf This problem requires that Java Script be enabled $BR}</NOSCRIPT> \end{rawhtml}
      ",
HTML => "$PAR<NOSCRIPT> <B>This problem requires that Java Script be enabled </NOSCRIPT></B>$PAR"
));

BEGIN_TEXT
Below is an "oracle" function. An oracle function is a function presented interactively. 
When you type in an \(x\) value, and press the --f--\(>\) button and 
the value \(f(x)\) appears in the right hand window.  There are three lines, so you can easily calculate
three different values of the function at one time. 
$PAR
Determine the limits for the function \( f\) at  \($x0\).
$PAR
\( \displaystyle \lim_{x\to $x0^{-} } \) = \{ans_rule(10)\}$BR
\( f($x0) \)   =\{ ans_rule(10) \}$BR
\( \displaystyle \lim_{x\to $x0^{+}  } \) = \{ ans_rule(10) \}$BR
$PAR
Are all of these values the same?: (Y or N) \{ ans_rule(6) \}.  If so then the function
is $BBOLD continuous $EBOLD at \($x0\) $PAR

Are the left and right limits the same at \($x0 \)?: (Y or N) \{ ans_rule(6) \}.  If so then this 
function is almost continuous and could be made continuous by redefining one value of the function
namely \( f($x0) \).
$PAR
END_TEXT

$continuousQ = 'N';
$continuousQ = 'Y' if ($left_limit == $value and $value == $right_limit);
$madeContinuousQ = 'N';
$madeContinuousQ = 'Y' if ($left_limit  == $right_limit);


$javaScript2 = begintable(3) .
               MODES(HTML =>q{<TR>
					<TH>x</TH><TH></TH><TH>f(x)</TH>
					<TR>},
					TeX => "x & \(\rightarrow\) & f(x)\\"
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output.value=func(this.form.Input.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output"   Size="30">}, TeX => 'result: \(f(x)\)')
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input2"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output2.value=func(this.form.Input2.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output2"   Size="30">}, TeX => 'result: \(f(x)\)')
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input3"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output3.value=func(this.form.Input3.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output3"   Size="30">}, TeX => 'result: \(f(x)\)')
				) . endtable();
     
TEXT($javaScript2);


ANS(num_cmp([ $left_limit,$value,$right_limit ]),str_cmp([$continuousQ,$madeContinuousQ]));  #We are allowing 1 percent error for the answer.

			
&ENDDOCUMENT;


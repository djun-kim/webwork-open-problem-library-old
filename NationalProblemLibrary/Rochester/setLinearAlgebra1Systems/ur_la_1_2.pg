## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS ('linear algebra','linear system','row reduction')
## Tagged by cmd6a 5/3/06

## DBsubject('Linear Algebra')
## DBchapter('Systems of Linear Equations and Matrices')
## DBsection('Introduction to Systems of Linear Equations')
## Date('')
## Author('')
## Institution('Rochester')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGmatrixmacros.pl",
           "PGcomplexmacros.pl",
           );


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$matrix = new Matrix(2,2);
$matrix->zero;
$matrix_det=0;
$max_iterations = 10;

while (abs($matrix_det)<.1  && $max_iterations-- ) {
# define matrix
                    $matrix->assign(1,1, Complex->make(random(-5,5,1),random(-5,5,1)) );
                    $matrix->assign(1,2, Complex->make(random(-5,5,1),random(-5,5,1)) );        
                    $matrix->assign(2,1, Complex->make(random(-5,5,1),random(-5,5,1)) );
                    $matrix->assign(2,2, Complex->make(random(-5,5,1),random(-5,5,1)) );
                    $matrix_det = ($matrix->element(1,1))*($matrix->element(2,2))-($matrix->element(1,2))*($matrix->element(2,1));
}
warn "Can't calculate an invertible matrix" unless $max_iterations;
# The resulting matrix is guaranteed invertible and the upper left corner is non zero
# so that you won't have to change orders in order to get a pivot.

# define solution
	$x = Complex->make(non_zero_random(-5,5,1),random(-5,5,1));
	$y = Complex->make(non_zero_random(-5,5,1),non_zero_random(-5,5,1));

#define right hand side
        $rhs = new Matrix(2,1);  # a column vector
        $rhs-> assign(1,1, ($matrix->element(1,1))*$x + ($matrix->element(1,2)*$y));
        $rhs-> assign(2,1, ($matrix->element(2,1))*$x + ($matrix->element(2,2)*$y));

BEGIN_TEXT

Perform one step of row reduction, in order to calculate the values for x and y by back substitution.
Then calculate the values for x and for y.  Also calculate the determinant of the original matrix.
$PAR
You can let webwork do much of the calculation for you if you want (e.g.  enter 45-(56/76)(-3) instead
of calculating the value out).  You can also use the preview feature in order to make sure
that you have used the correct syntax in entering the answer.
$PAR

This problem has rather difficult complex calculations.

$PAR
[Note-- since the determinant is unchanged by row reduction it will be easier to calculate the
determinant of the row reduced matrix.]
$BR
\{mbox([ display_matrix($matrix), display_matrix([['\(x\)'],['\(y\)']]), '\(=\)', display_matrix($rhs) ]) \}
$BR
\{mbox([ display_matrix([[$matrix->element(1,1), $matrix->element(1,2)], [0, ans_rule(25)]]), 
display_matrix([['\(x\)'],['\(y\)']]), '\(=\)', 
display_matrix([[$rhs->element(1,1)], [ans_rule(25)]]) ]) \}
$BR
\(x = \) \{ans_rule(50)\} $BR
\(y = \) \{ans_rule(50)\} $BR
\(\mbox{det} = \)\{ans_rule(50)\}

END_TEXT


#ANS  cplx_cmp( $matrix->element(1,1),   tol=>.2  );
#ANS cplx_cmp( $matrix->element(1,2) ,   tol=>.2  );

$ratio = ($matrix->element(2,1))/$matrix->element(1,1);

ANS cplx_cmp( $matrix->element(2,2)-$ratio*$matrix->element(1,2) ,reltol=>.2  );
#ANS(cplx_cmp( $rhs->element(1,1), tol=>.2 ));
ANS(cplx_cmp( $rhs->element(2,1)- $ratio*$rhs->element(1,1) , reltol=>.2    ));

ANS cplx_cmp( $x,,reltol=>.2);
ANS cplx_cmp( $y,,reltol=>.2);
ANS cplx_cmp( $matrix_det,reltol=>.2);


#########################################################


ENDDOCUMENT() ;    





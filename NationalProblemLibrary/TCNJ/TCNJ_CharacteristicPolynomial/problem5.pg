## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('determinant' 'characteristic polynomial' 'eigenvalues')
## Tagged by tda2d

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('TCNJ')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl",
"PGdiffeqmacros.pl",
"parserMultiAnswer.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$eig = random(-9,9,1);

$a= new Matrix(2,2);
# define invertible matrix
        $a11 = random(-1,1,2);
        $a12 = non_zero_random(-3,3,1);
        $mult = non_zero_random(-2,2,1);
        $a21 = $mult * $a11;
        $b1 = random(-1,1,2);
        $a22 = $mult * $a12 + $b1;

        $a->assign(1,1, $a11);
        $a->assign(1,2, $a12);
        $a->assign(2,1, $a21);
        $a->assign(2,2, $a22);
        $a_lr = $a->decompose_LR();
        $a_det = $a11 * $b1;

# define inverse matrix
        $b = $a_lr->invert_LR();

    $e = new Matrix(2,2);
    $e->assign(1,1, $eig);
    $e->assign(2,2, $eig);
    $e->assign(1,2, non_zero_random(-2,2,1));
    $e->assign(2,1, 0);	

# define final matrix
        $matrix = $a * $e *$b;
        $matrix_lr = $matrix->decompose_LR();
        $matrix_det = $matrix_lr->det_LR();

# matrix entries are integers, but sometimes are printed as *e-16 or something like that.
# to avoid this, we will round each entry

foreach $i (1..2) {
        foreach $j (1..2) {
                $m[$i][$j] = $matrix->element($i,$j);
                $m[$i][$j] = round($m[$i][$j]);
                $matrix -> assign($i,$j,$m[$i][$j]);
        }
}

## to check that we have a correct answer, just verify that
##    the appropriate matrix multiplication works
$ev = MultiAnswer( $eig, $a11, $a12 )->with(
    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  "Eigenvalue = %s, Eigenvector=(%s, %s)" ,
    tex_format =>  "\text{Eigenvalue }= %s, \text{Eigenvector }=(%s, %s)" ,
    checker => sub {
        my ($correct, $student, $self ) = @_;
	my $stuE = @{$student}[0];
	my ($v1, $v2) = @{$student}[1..2];
        my $flag = -1;
        my $flag2 = 0;
        if( $stuE ){
          if($stuE != $eig) {
                 Value::Error("Your eigenvalue is incorrect.");
                 $flag=0; 
          }else{
             if(!( ($v1) && ($v2) )){
                 $flag=0;
                 Value::Error("Your eigenvalue is correct. Please enter an eigenvector.");
             } 
          }
        }else{
          Value::Error("You need to enter an eigenvalue.");
          $flag=0;
        }

        if ($flag == -1){
          if ($v1 == 0 && $v2==0)  {
             Value::Error("Eigenvectors must be nonzero.");
             $flag=0;
          }else{
	     $flag2 = (( $m[1][1]*$v1 + $m[1][2]*$v2 == $eig * $v1) &&
                      ( $m[2][1]*$v1 + $m[2][2]*$v2 == $eig * $v2));
             if(!$flag2){
                 Value::Error("The eigenvalue is correct, but not the eigenvector.");
             }
	  }
        }
        return $flag2;
    }
);

BEGIN_TEXT

\{ mbox( 'The matrix \(A=\)', display_matrix($matrix) ) \} 
$BR
has an eigenvalue \(\lambda\) of multiplicity 2 with 
corresponding eigenvector \(v\). 
$BR
$BR
Then
\( \lambda =\) \{$ev->ans_rule(5)\}, and 
\(v  = \)  ( \{$ev->ans_rule(5)\},  \{$ev-> ans_rule(5)\} )
END_TEXT


##\{ NAMED_ANS_RULE(vec1,10) \}  , \{ NAMED_ANS_RULE_OPTION(vec1,10) \} ).



## ANS(num_cmp($eig));
## NAMED_ANS(vec1 => check_eigenvector($e->element(1,1), $matrix, correct_ans =>[$a->column(1)->list]) );
##END_TEXT

ANS( $ev->cmp() );

ENDDOCUMENT() ;


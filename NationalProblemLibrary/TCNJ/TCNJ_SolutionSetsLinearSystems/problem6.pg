## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('matrix', 'solutions' 'free variables')
## Tagged by tda2d

## DBsubject('Linear Algebra')
## DBchapter('Systems of Linear Equations and Matrices')
## DBsection('Introduction to Systems of Linear Equations')
## Date('')
## Author('')
## Institution('TCNJ')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl",
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl",
"PGdiffeqmacros.pl",
"parserMultiAnswer.pl",
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$a = random(-5,5,1);
$b = random(-5,5,1);
$c = non_zero_random(-5,5,1);
$mult = random(2,4,1);
$d = $a*$mult;
$e = $b*$mult;
$f = $c*$mult;

$ans1 = -$a;
$ans2 = -$b;
$ans3 = -$c;

$v1 = new Matrix(4,1);
$v1->assign(1,1, $ans1);
$v1->assign(2,1, 1);
$v1->assign(3,1, 0);
$v1->assign(4,1, 0);
@v1vals = ( Compute($ans1), Compute(1), Compute(0), Compute(0) );

$v2 = new Matrix(4,1);
$v2->assign(1,1, $ans2);
$v2->assign(2,1, 0);
$v2->assign(3,1, 1);
$v2->assign(4,1, 0);
@v2vals = ( Compute($ans2), Compute(0), Compute(1), Compute(0) );

$v3 = new Matrix(4,1);
$v3->assign(1,1, $ans3);
$v3->assign(2,1, 0);
$v3->assign(3,1, 0);
$v3->assign(4,1, 1);
@v3vals = ( Compute($ans3), Compute(0), Compute(0), Compute(1) );

$vec=Matrix->new_from_array_ref( [[1, $a, $b, $c],[$mult, $d, $e, $f]]);

$isVec = MultiAnswer( @v1vals, @v2vals, @v3vals )->with(
	singleResult=>1,
	format=>"[%s,%s,%s,%s],[%s,%s,%s,%s],[%s,%s,%s,%s]",
	tex_format=>"[%s,%s,%s,%s],[%s,%s,%s,%s],[%s,%s,%s,%s]",
	checker=>sub {
	    my ( $ansRef, $stuRef, $ansHash ) = @_;
	    my @ansV = @{$ansRef};
	    my @stuV = @{$stuRef};
	    # separate out the student answers for each of the
	    #    three vectors
	    my @stuV1 = ( $stuV[0], $stuV[1], $stuV[2], $stuV[3] );
	    my @stuV2 = ( $stuV[4], $stuV[5], $stuV[6], $stuV[7] );
	    my @stuV3 = ( $stuV[8], $stuV[9], $stuV[10], $stuV[11] );

	    # for the first vector x2 must be non-zero; for
	    #    the second, x3, and for the third, x4
	    my $zero = Compute(0);
	    if ( $zero == $stuV1[1] || $zero == $stuV2[2] ||
		 $zero == $stuV3[3] ) {
		Value::Error( "Check that your vectors " .
				     "include a multiple of the " .
				     "correct component of x." );
		return 0;
	    } else {
		# then each of the rows must be zero, and the three
		#    vectors must be independent
		if ( $zero == $stuV1[0] + $a*$stuV1[1] + $b*$stuV1[2] +
		     $c*$stuV1[3] &&
		     $zero == $stuV2[0] + $a*$stuV2[1] + $b*$stuV2[2] +
		     $c*$stuV2[3] &&
		     $zero == $stuV3[0] + $a*$stuV3[1] + $b*$stuV3[2] +
		     $c*$stuV3[3] ) {
		    # check independence: can we get each of the
		    #    correct vectors as a linear combination of
		    #    these?
		    my $stuMat = new Matrix(3,3);
		    my $ansV1 = new Matrix(3,1);
		    my $ansV2 = new Matrix(3,1);
 		    my $ansV3 = new Matrix(3,1);
		    for ( my $i=0; $i<3; $i++ ) {
			$stuMat->assign($i+1, 1, $stuV1[$i]->string());
			$stuMat->assign($i+1, 2, $stuV2[$i]->string());
			$stuMat->assign($i+1, 3, $stuV3[$i]->string());
			$ansV1->assign($i+1, 1, $ansV[$i]->string());
			$ansV2->assign($i+1, 1, $ansV[$i+4]->string());
			$ansV3->assign($i+1, 1, $ansV[$i+8]->string());
		    }
		    my $lr_stuMat = $stuMat->decompose_LR();
		    my @sMat1 = $lr_stuMat->solve_LR($ansV1);
		    my @sMat2 = $lr_stuMat->solve_LR($ansV2);
		    my @sMat3 = $lr_stuMat->solve_LR($ansV3);
		    if ( @sMat1 && @sMat2 && @sMat3 ) {
			# check that the last component is also
			#    satisfied
			# ($dim1,$x1,$B1)
			my $check1 = $sMat1[1]->element(1,1)*$stuV[3] +
			    $sMat1[1]->element(2,1)*$stuV[7] +
			    $sMat1[1]->element(3,1)*$stuV[11];
			my $check2 = $sMat2[1]->element(1,1)*$stuV[3] +
			    $sMat2[1]->element(2,1)*$stuV[7] +
			    $sMat2[1]->element(3,1)*$stuV[11];
			my $check3 = $sMat3[1]->element(1,1)*$stuV[3] +
			    $sMat3[1]->element(2,1)*$stuV[7] +
			    $sMat3[1]->element(3,1)*$stuV[11];
			if ( $ansV[3] == $check1 &&
			     $ansV[7] == $check2 &&
			     $ansV[11] == $check3 ) {
			    # yay!
			    return 1;
			} else {
			    if ( ( $ansV[3] == $check1 &&
				   $ansV[7] == $check2 ) ||
				 ( $ansV[3] == $check1 &&
				   $ansV[11] == $check3 ) ||
				 ( $ansV[7] == $check2  &&
				   $ansV[11] == $check3 ) ) {
				return 0.67;
			    } elsif ( $ansV[3] == $check1 ||
				      $ansV[7] == $check2 ||
				      $ansV[11] == $check3 ) {
				return 0.33;
			    }
			}
		    } else {
			return 0;
		    }
		} else {
		    return 0;
		}
	    } } );

BEGIN_TEXT

\{ mbox( 'Let \( A = \)', display_matrix($vec), '.' ) \}
$BR
Describe all solutions of \( Ax = 0 \).
$BR
$BR
\{ mbox( '\(x=x_{2}\)',
    display_matrix( [[ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ] ]),
	 '\(+x_{3}\)',
    display_matrix( [[ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ] ]),
	 '\(+x_{4}\)',
    display_matrix( [[ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ],
		     [ $isVec->ans_rule(5) ] ]) ) \}

END_TEXT

ANS( $isVec->cmp() );

ENDDOCUMENT() ;

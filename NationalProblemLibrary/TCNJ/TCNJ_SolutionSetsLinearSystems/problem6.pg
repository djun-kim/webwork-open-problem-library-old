## DESCRIPTION
## KEYWORDS('matrix', 'solutions', 'free variables')
##
## ENDDESCRIPTION

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl",
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl",
"PGdiffeqmacros.pl",
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$a = random(-5,5,1);
$b = random(-5,5,1);
$c = non_zero_random(-5,5,1);
$mult = random(2,4,1);
$d = $a*$mult;
$e = $b*$mult;
$f = $c*$mult;

$ans1 = -$a;
$ans2 = -$b;
$ans3 = -$c;

$v1 = new Matrix(4,1);
$v1->assign(1,1, $ans1);
$v1->assign(2,1, 1);
$v1->assign(3,1, 0);
$v1->assign(4,1, 0);

$v2 = new Matrix(4,1);
$v2->assign(1,1, $ans2);
$v2->assign(2,1, 0);
$v2->assign(3,1, 1);
$v2->assign(4,1, 0);

$v3 = new Matrix(4,1);
$v3->assign(1,1, $ans3);
$v3->assign(2,1, 0);
$v3->assign(3,1, 0);
$v3->assign(4,1, 1);

$vec=Matrix->new_from_array_ref( [[1, $a, $b, $c],[$mult, $d, $e, $f]]);

BEGIN_TEXT

\{ mbox( 'Let \( A = \)', display_matrix($vec), '.' ) \}
$BR
Describe all solutions of \( Ax = 0 \).
$BR
$BR
\{ mbox( '\(x=x_{2}\)', display_matrix( [[ NAMED_ANS_RULE(vec1,5)], [ NAMED_ANS_RULE_OPTION(vec1,5)], [ NAMED_ANS_RULE_OPTION(vec1,5)], [ NAMED_ANS_RULE_OPTION(vec1,5)]]), '\(+x_{3}\)', display_matrix( [[ NAMED_ANS_RULE(vec2,5)], [ NAMED_ANS_RULE_OPTION(vec2,5)], [ NAMED_ANS_RULE_OPTION(vec2,5)], [ NAMED_ANS_RULE_OPTION(vec2,5)]]), '\(+x_{4}\)', display_matrix( [[ NAMED_ANS_RULE(vec3,5)], [ NAMED_ANS_RULE_OPTION(vec3,5)], [ NAMED_ANS_RULE_OPTION(vec3,5)], [ NAMED_ANS_RULE_OPTION(vec3,5)]]) ) \}

END_TEXT

NAMED_ANS vec1=> vec_cmp2($v1);
NAMED_ANS vec2=> vec_cmp2($v2);
NAMED_ANS vec3=> vec_cmp2($v3);

sub vec_cmp2{    #check to see that the submitted vector is a non-zero multiple of the correct vector
    my $correct_matrix = shift;
    my %options = @_;
    $ans_eval = new AnswerEvaluator;
    $ans_eval->{debug} = $options{debug};
    set_default_options( ~~%options,
						 debug			=>	0,
	);
    $ans_eval->ans_hash( correct_ans  => "a multiple of ( " . join(", ", $correct_matrix->list() ) . " )",
                                         type             => 'vec_cmp2'
    );
    $ans_eval->install_pre_filter(~~&is_array);
        $ans_eval->install_pre_filter(~~&std_num_array_filter);

        $ans_eval->install_evaluator(sub { my $rh_ans = shift;
                                                                           my %options  = @_;
                                                                           my @in_vec=@{$rh_ans->input()};
                                                                           unless (@in_vec ) {
                                                        return($rh_ans); # return blank answers
                                                        # make sure the vectors are the same dimension
                                           }
                                                                           my $input_vec = Matrix->new_column_matrix($rh_ans->input());
                                                                           my ($param,$inv);
                                                                                        $param = $correct_matrix->proj_coeff($input_vec);
                                                                                        $param->assign(1,1,1) if $param->element(1,1)==0; # don't allow identically zero answer
                                                                            my $out_vec = $input_vec - $correct_matrix*$param;
                                                                            my @diff = $out_vec->list();  # lists a column vector
                                                                                $rh_ans->{score} = zero_check(~~@diff,tol=>.001);
                                                                                $rh_ans;

    
        });
    $ans_eval->install_post_filter( sub { my $rh_ans= shift;
                                                                                          my %options = @_;
                                                                                          if ($rh_ans->catch_error('NOTARRAY') ) {
                                                                                                  $rh_ans->{ans_message} = "This answer is supposed to be an array";
                                                                                          }
                                                                                          $rh_ans;
        });
        $ans_eval->install_post_filter( sub {     my $rh_ans= shift;
                                                                                          my %options = @_;
                                                                                          if ($rh_ans->catch_error('SYNTAX') ) {
                                                                                                  $rh_ans->{ans_message} .= $rh_ans->{error_message};
                                                                                                  $rh_ans->clear_error('SYNTAX');
                                                                                          } 
                                                                                          $rh_ans;
        });
    $ans_eval;
}

ENDDOCUMENT() ;
## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('matrix', 'solutions' 'free variables')
## Tagged by tda2d

## DBsubject('Linear Algebra')
## DBchapter('Systems of Linear Equations and Matrices')
## DBsection('Introduction to Systems of Linear Equations')
## Date('')
## Author('')
## Institution('TCNJ')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl",
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl",
"PGdiffeqmacros.pl",
"parserMultiAnswer.pl",
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$a = non_zero_random(-5,5,1);
$b = non_zero_random(-5,5,1);
$c = non_zero_random(-5,5,1);
$d = non_zero_random(-5,5,1);
$e = non_zero_random(-5,5,1);
$f = non_zero_random(-5,5,1);
$g = non_zero_random(-5,5,1);
$h = non_zero_random(-5,5,1);

$vec=Matrix->new_from_array_ref( [[1, $a, $b, $c, $d, $e],
				  [0, 0, 1, $f, 0, $g],
				  [0, 0, 0, 0, 1, $h],
				  [0, 0, 0, 0, 0, 0]]);

$ans1 = -$a;
$ans2 = -$c+$b*$f;
$ans3 = -$f;
$ans4 = -$e+$d*$h+$b*$g;
$ans5 = -$g;
$ans6 = -$h;

$v1 = new Matrix(6,1);
$v1->assign(1,1, $ans1);
$v1->assign(2,1, 1);
$v1->assign(3,1, 0);
$v1->assign(4,1, 0);
$v1->assign(5,1, 0);
$v1->assign(6,1, 0);
@v1vals = ( Compute($ans1), Compute(1), Compute(0), Compute(0), Compute(0),
	    Compute(0) );

$v2 = new Matrix(6,1);
$v2->assign(1,1, $ans2);
$v2->assign(2,1, 0);
$v2->assign(3,1, $ans3);
$v2->assign(4,1, 1);
$v2->assign(5,1, 0);
$v2->assign(6,1, 0);
@v2vals = ( Compute($ans2), Compute(0), Compute($ans3), Compute(1),
	    Compute(0), Compute(0) );

$v3 = new Matrix(6,1);
$v3->assign(1,1, $ans4);
$v3->assign(2,1, 0);
$v3->assign(3,1, $ans5);
$v3->assign(4,1, 0);
$v3->assign(5,1, $ans6);
$v3->assign(6,1, 1);
@v3vals = ( Compute($ans4), Compute(0), Compute($ans5), Compute(0),
	    Compute($ans6), Compute(1) );

$isVec = MultiAnswer( @v1vals, @v2vals, @v3vals )->with(
	singleResult=>1,
	format=>"[%s,%s,%s,%s,%s,%s],[%s,%s,%s,%s,%s,%s]," .
		"[%s,%s,%s,%s,%s,%s]",
	tex_format=>"[%s,%s,%s,%s,%s,%s],[%s,%s,%s,%s,%s,%s]," .
		    "[%s,%s,%s,%s,%s,%s]",
	checker=>sub {
	    my ( $ansRef, $stuRef, $ansHash ) = @_;
	    my @ansV = @{$ansRef};
	    my @stuV = @{$stuRef};
	    # separate out the student answers for each of the
	    #    three vectors
	    my @stuV1 = ( $stuV[0], $stuV[1], $stuV[2], $stuV[3],
			  $stuV[4], $stuV[5] );
	    my @stuV2 = ( $stuV[6], $stuV[7], $stuV[8], $stuV[9],
			  $stuV[10], $stuV[11] );
	    my @stuV3 = ( $stuV[12], $stuV[13], $stuV[14], $stuV[15],
			  $stuV[16], $stuV[17] );

	    # for the first vector x2 must be non-zero; for
	    #    the second, x4, and for the third, x6
	    my $zero = Compute(0);
	    if ( $zero == $stuV1[1] || $zero == $stuV2[3] ||
		 $zero == $stuV3[5] ) {
		Value::Error( "Check that your vectors " .
			      "include a multiple of the " .
			      "correct component of x." );
		return 0;
	    } else {
		# then each of the rows must be zero, and the three
		#    vectors must be independent
		if ( $zero == $stuV1[0] + $a*$stuV1[1] + $b*$stuV1[2] +
		     $c*$stuV1[3] + $d*$stuV1[4] + $e*$stuV1[5] &&
		     $zero == $stuV2[2] + $f*$stuV2[3] + $g*$stuV2[5] &&
		     $zero == $stuV3[4] + $h*$stuV3[5] ) {
		    # check independence: can we get each of the
		    #    correct vectors as a linear combination of
		    #    these?
		    my $stuMat = new Matrix(3,3);
		    my $ansV1 = new Matrix(3,1);
		    my $ansV2 = new Matrix(3,1);
 		    my $ansV3 = new Matrix(3,1);
		    for ( my $i=0; $i<3; $i++ ) {
			$stuMat->assign($i+1, 1, $stuV1[$i]->string());
			$stuMat->assign($i+1, 2, $stuV2[$i]->string());
			$stuMat->assign($i+1, 3, $stuV3[$i]->string());
			$ansV1->assign($i+1, 1, $ansV[$i]->string());
			$ansV2->assign($i+1, 1, $ansV[$i+6]->string());
			$ansV3->assign($i+1, 1, $ansV[$i+12]->string());
		    }
#  [ s11  s12  s13 ] [x1]   [a1]
#  [ s21  s22  s23 ] [x2] = [a2]
#  [ s31  s32  s33 ] [x3]   [a3]
#
#  [ s41  s42  s43 ] [x1]   [a4]
#  [ s51  s52  s53 ] [x2] = [a5]
#  [ s61  s62  s63 ] [x3]   [a6]
#for each vector a
#
#  [ s0  s6   s12 ] [x1]   [a1]
#  [ s1  s7   s13 ] [x2] = [a2]
#  [ s2  s8   s14 ] [x3]   [a3]
#
#  [ s3  s9   s15 ] [x1]   [a4]
#  [ s4  s10  s16 ] [x2] = [a5]
#  [ s5  s11  s17 ] [x3]   [a6]
		    my $lr_stuMat = $stuMat->decompose_LR();
		    my @sMat1 = $lr_stuMat->solve_LR($ansV1);
		    my @sMat2 = $lr_stuMat->solve_LR($ansV2);
		    my @sMat3 = $lr_stuMat->solve_LR($ansV3);
		    if ( @sMat1 && @sMat2 && @sMat3 ) {
		        # check remaining rows
			# ($dim1,$x1,$B1)
			my $check11 = $sMat1[1]->element(1,1)*$stuV[3] +
			    $sMat1[1]->element(2,1)*$stuV[9] +
			    $sMat1[1]->element(3,1)*$stuV[15];
			my $check12 = $sMat1[1]->element(1,1)*$stuV[4] +
			    $sMat1[1]->element(2,1)*$stuV[10] +
			    $sMat1[1]->element(3,1)*$stuV[16];
			my $check13 = $sMat1[1]->element(1,1)*$stuV[5] +
			    $sMat1[1]->element(2,1)*$stuV[11] +
			    $sMat1[1]->element(3,1)*$stuV[17];
			my $check21 = $sMat2[1]->element(1,1)*$stuV[3] +
			    $sMat2[1]->element(2,1)*$stuV[9] +
			    $sMat2[1]->element(3,1)*$stuV[15];
			my $check22 = $sMat2[1]->element(1,1)*$stuV[4] +
			    $sMat2[1]->element(2,1)*$stuV[10] +
			    $sMat2[1]->element(3,1)*$stuV[16];
			my $check23 = $sMat2[1]->element(1,1)*$stuV[5] +
			    $sMat2[1]->element(2,1)*$stuV[11] +
			    $sMat2[1]->element(3,1)*$stuV[17];
			my $check31 = $sMat3[1]->element(1,1)*$stuV[3] +
			    $sMat3[1]->element(2,1)*$stuV[9] +
			    $sMat3[1]->element(3,1)*$stuV[15];
			my $check32 = $sMat3[1]->element(1,1)*$stuV[3] +
			    $sMat3[1]->element(2,1)*$stuV[10] +
			    $sMat3[1]->element(3,1)*$stuV[16];
			my $check33 = $sMat3[1]->element(1,1)*$stuV[3] +
			    $sMat3[1]->element(2,1)*$stuV[11] +
			    $sMat3[1]->element(3,1)*$stuV[17];

			if ( $ansV[3] == $check11 && $ansV[4] == $check12 &&
			     $ansV[5] == $check13 &&
			     $ansV[9] == $check21 && $ansV[10] == $check22 &&
			     $ansV[11] == $check23 &&
			     $ansV[15] == $check31 && $ansV[16] == $check32 &&
			     $ansV[17] == $check33 ) {
			    # yay!
			    return 1;
			} else {
			    return 0;
			}
		    } else {
			return 0;
		    }
		} else {
		    return 0;
		}
	    } } );


BEGIN_TEXT

\{ mbox( 'Let \( A = \)', display_matrix($vec), '.' ) \}
$BR
Describe all solutions of \( Ax = 0 \).
$BR
$BR
\{ mbox( '\(x=x_{2}\)', 
	 display_matrix( [[ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ]]),
	 '\(+x_{4}\)',
	 display_matrix( [[ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ]]),
	 '\(+x_{6}\)',
	 display_matrix( [[ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ],
			  [ $isVec->ans_rule(5) ]]) ) \}

END_TEXT

ANS( $isVec->cmp() );

ENDDOCUMENT() ;

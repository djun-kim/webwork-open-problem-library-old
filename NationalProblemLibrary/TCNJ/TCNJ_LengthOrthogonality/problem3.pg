## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('bases' 'basis' 'matrix')
## Tagged by tda2d

## DBsubject('Linear Algebra')
## DBchapter('Vector Spaces')
## DBsection('Bases')
## Date('')
## Author('')
## Institution('TCNJ')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$v1 = new Matrix(3,1);
$v1->assign(1,1, -1);
$v1->assign(2,1, -1);
$v1->assign(3,1, 1);

BEGIN_TEXT

\{ mbox( 'Let \(W\) be the set of all vectors ', display_matrix([['x'], ['y'], ['x + y']]), 'with \(x\) and \(y\) real.'  ) \}
Find a basis of \(W^{\perp}\). 
$BR
\{ mbox( display_matrix(
[[ NAMED_ANS_RULE(vec1,5)],
[ NAMED_ANS_RULE_OPTION(vec1,5)], [ NAMED_ANS_RULE_OPTION(vec1,5)]] )) \}

END_TEXT

NAMED_ANS vec1=> vec_cmp2($v1);

sub vec_cmp2{    #check to see that the submitted vector is a non-zero multiple of the correct vector
    my $correct_matrix = shift;
    my %options = @_;
    $ans_eval = new AnswerEvaluator;
    $ans_eval->{debug} = $options{debug};
    set_default_options( ~~%options,
						 debug			=>	0,
	);
    $ans_eval->ans_hash( correct_ans  => "a multiple of ( " . join(", ", $correct_matrix->list() ) . " )",
                                         type             => 'vec_cmp2'
    );
    $ans_eval->install_pre_filter(~~&is_array);
        $ans_eval->install_pre_filter(~~&std_num_array_filter);

        $ans_eval->install_evaluator(sub { my $rh_ans = shift;
                                                                           my %options  = @_;
                                                                           my @in_vec=@{$rh_ans->input()};
                                                                           unless (@in_vec ) {
                                                        return($rh_ans); # return blank answers
                                                        # make sure the vectors are the same dimension
                                           }
                                                                           my $input_vec = Matrix->new_column_matrix($rh_ans->input());
                                                                           my ($param,$inv);
                                                                                        $param = $correct_matrix->proj_coeff($input_vec);
                                                                                        $param->assign(1,1,1) if $param->element(1,1)==0; # don't allow identically zero answer
                                                                            my $out_vec = $input_vec - $correct_matrix*$param;
                                                                            my @diff = $out_vec->list();  # lists a column vector
                                                                                $rh_ans->{score} = zero_check(~~@diff,tol=>.001);
                                                                                $rh_ans;

    
        });
    $ans_eval->install_post_filter( sub { my $rh_ans= shift;
                                                                                          my %options = @_;
                                                                                          if ($rh_ans->catch_error('NOTARRAY') ) {
                                                                                                  $rh_ans->{ans_message} = "This answer is supposed to be an array";
                                                                                          }
                                                                                          $rh_ans;
        });
        $ans_eval->install_post_filter( sub {     my $rh_ans= shift;
                                                                                          my %options = @_;
                                                                                          if ($rh_ans->catch_error('SYNTAX') ) {
                                                                                                  $rh_ans->{ans_message} .= $rh_ans->{error_message};
                                                                                                  $rh_ans->clear_error('SYNTAX');
                                                                                          } 
                                                                                          $rh_ans;
        });
    $ans_eval;
}

ENDDOCUMENT();       # This should be the last executable line in the problem.
## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('eigenvalues' 'eigenvectors')
## Tagged by tda2d

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('TCNJ')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl", 
"PGcomplexmacros.pl",
"parserMultiAnswer.pl"
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$a= new Matrix(3,3);

# create an invertible matrix with det either 1  or -1

$a11 = random(-1,1,2);
$a21 = 0;
$a31 = 0;

$a12 = random(-5,5,1);
$a22 = random(-1,1,2);
$a32 = 0;

$a13 = random(-5,5,1);
$a23 = random(-5,5,1);
$a33 = random(-1,1,2);

$det = $a11*$a22*$a33;

# define matrix

	$a->assign(1,1, $a11 );
	$a->assign(1,2, $a12 );
	$a->assign(1,3, $a13 );
	$a->assign(2,1, $a21 );
	$a->assign(2,2, $a22 );
	$a->assign(2,3, $a23 );
	$a->assign(3,1, $a31 );
        $a->assign(3,2, $a32 );
        $a->assign(3,3, $a33 );
	$a_lr = $a->decompose_LR();
	$a_det = $a_lr->det_LR();

# define inverse matrix
	$b = $a_lr->invert_LR();

# define eigenvalues
    $e = new Matrix(3,3);
    $e->one();
    $e1=random(-5,-2,1);
    $e2=random(-1,1,1);
    $e3=random(2,5,1);
    $e->assign(1,1,$e1 );
    $e->assign(2,2,$e2 );
    $e->assign(3,3,$e3 );

# define eigenvectors
	$v1 = new Matrix(3,1);
	$v1->assign(1,1, $a11);
        $v1->assign(2,1, $a21);
        $v1->assign(3,1, $a31);
        	$v2 = new Matrix(3,1);
        	$v2->assign(1,1, $a12);
        	$v2->assign(2,1, $a22);
        	$v2->assign(3,1, $a32);
        $v3 = new Matrix(3,1);
        $v3->assign(1,1, $a13);
        $v3->assign(2,1, $a23);
        $v3->assign(3,1, $a33);

# define final matrix
        $matrix = new Matrix(3, 3);
	$matrix = $a * $e *$b;
	$matrix_lr = $matrix->decompose_LR();
	$matrix_det = $matrix_lr->det_LR();

foreach $i (1..3) { 
	foreach $j (1..3) { 
		$m[$i][$j] = $matrix->element($i,$j);
		$m[$i][$j] = round($m[$i][$j]);
		$matrix -> assign($i,$j,$m[$i][$j]);  
  	}
}



$ev = MultiAnswer($e1, $a11, $a21, $a31, $e2, $a12, $a22, $a32, $e3, $a13, $a23, $a33)->with(
    singleResult => 1,
    allowBlankAnswers => 1,
    format =>  "(Eigenvalue, Eigenvector) pairs = $BR (%s, (%s, %s, %s)),$BR (%s, (%s, %s, %s)), $BR (%s, (%s, %s, %s))",
    tex_format =>  "\text{(Eigenvalue, Eigenvector) pairs }= (%s, (%s, %s, %s)), (%s, (%s, %s, %s)), (%s, (%s, %s, %s))",
    checker => sub {
        my ($correct, $student, $self ) = @_;
        my ($stue1, $stuv11, $stuv12, $stuv13, $stue2, $stuv21, $stuv22, $stuv23, $stue3, $stuv31, $stuv32, $stuv33) = @{$student};
        my ($f1, $b11, $b21, $b31, $f2, $b12, $b22, $b32, $f3, $b13, $b23, $b33) = @{$correct}; 
        my $flag = -1;
        my $flag1 = 0;
        my $flag2 = 0;
        my $flag3 = 0;
        my $flag4 = 0;
        my $flag5 = 0;
        
        if($stue1 && $stue2 && $stue1 == $stue2){
           $flag=0;   
           Value::Error("The eigenvalues of A are distinct1");
        }
        if($stue1 &&  $stue3 && $stue1 == $stue3){
            $flag=0; 
            Value::Error("The eigenvalues of A are distinct2");
        }
        if($stue3  && $stue2 && $stue3 == $stue2){
           $flag=0; 
           Value::Error("The eigenvalues of A are distinct3");
        }

       
        if(ref($stue1) eq ref($f1) && ref($stuv11) eq ref($b11) && ref($stuv12) eq ref($b12) && ref($stuv13) eq ref($b13)){          
           
           if($stuv11 != 0 || $stuv12 != 0 || $stuv13!=0 ){
            
             my $stuv1 = new Matrix(3, 1);
             $stuv1 -> zero;
             $stuv1 -> assign(1,1, $stuv11->value);
             $stuv1 -> assign(2,1, $stuv12->value);
             $stuv1 -> assign(3,1, $stuv13->value);
             my $stub = new Matrix(3, 3);
             $stub-> zero;
             $stub->assign(1,1, $stue1->value);
             $stub->assign(2,2, $stue1->value);
             $stub->assign(3,3, $stue1->value);
 #            if( $matrix * $stuv1 == $stub * $stuv1){
 #              $flag1 = 1;
 #            }
              if( $matrix * $stuv1 == $stue1->value * $stuv1){
                $flag1 = 1;
             }

          }
        }
     
        if(ref($stue3) eq ref($f3) && ref($stuv31) eq ref($b31) && ref($stuv32) eq ref($b32) && ref($stuv33) eq ref($b33)){          
           
           if($stuv31 != 0 || $stuv32 != 0 || $stuv33!=0 ){
            
             my $stuv3 = new Matrix(3, 1);
             $stuv3 -> zero;
             $stuv3 -> assign(1,1, $stuv31->value);
             $stuv3 -> assign(2,1, $stuv32->value);
             $stuv3 -> assign(3,1, $stuv33->value);
#             my $stub = new Matrix(3, 3);            
#             $stub-> zero;
#             $stub->assign(1,1, $stue3->value);
#             $stub->assign(2,2, $stue3->value);
#             $stub->assign(3,3, $stue3->value);
             if( $matrix * $stuv3 == $stue3->value * $stuv3){
               $flag3 = 1;
             }
           }
        }


if(ref($stue2) eq ref($f2) && ref($stuv21) eq ref($b21) && ref($stuv22) eq ref($b22) && ref($stuv23) eq ref($b23)){          
           
           if($stuv21 != 0 || $stuv22 != 0 || $stuv23!=0 ){
             
             my $stuv2 = new Matrix(3, 1);
             $stuv2 -> zero;
             $stuv2 -> assign(1,1, $stuv21->value);
             $stuv2 -> assign(2,1, $stuv22->value);
             $stuv2 -> assign(3,1, $stuv23->value);
#             my $stub = new Matrix(3, 3);
#             $stub-> zero;
#             $stub->assign(1,1, $stue2);
#             $stub->assign(2,2, $stue2);
#             $stub->assign(3,3, $stue2);
             if( $matrix * $stuv2 == $stue2->value * $stuv2){
               $flag2 = 1;
             }
           }
        }

   

      
        $flag4 = $flag1 + $flag2 + $flag3;
        if($flag==-1){
          if($flag4==3 && ($stue1 != $stue2) && ($stue1 != $stue3) && ($stue2 != $stue3)){
             $flag=1;
          }else{
            if($flag4 == 3 ){
               Value::Error("The eigenvalues of A are distinct.");
            }
            if($flag4 == 2 ){
               Value::Error("Two of the eigenvalue/vector pairs are correct");
            }
            if($flag4 == 1 ){
                  Value::Error("One of the eigenvalue/vector pairs is correct");
            }
            if($flag4 == 0 ){
                  Value::Error("None of the eigenvalue/vector pairs are correct $flag6");
            }
         }
        }
        return $flag; 
       
    }
);




BEGIN_TEXT

Find the eigenvalues and corresponding eigenvectors of the matrix
$BR
\{ mbox( '\( A = \)', display_matrix($matrix), ' . ' ) \} 
$BR
$BR
The eigenvalue
\( \lambda_1 =\)\{$ev->ans_rule(5)\} corresponds to the eigenvector ( \{$ev->ans_rule(5)\}, \{$ev ->ans_rule(5)\}, \{ $ev->ans_rule(5)\}).
$BR 
$BR
The eigenvalue
\( \lambda_2 =\)\{$ev->ans_rule(5)\} corresponds to the eigenvector ( \{$ev->ans_rule(5)\}, \{$ev->ans_rule(5)\}, \{$ev->ans_rule(5)\}).
$BR
$BR
The eigenvalue
\( \lambda_3 =\)\{$ev->ans_rule(5)\} corresponds to the eigenvector ( \{$ev->ans_rule(5)\}, \{$ev->ans_rule(5)\}, \{$ev->ans_rule(5)\}).


END_TEXT
ANS( $ev->cmp() );




ENDDOCUMENT() ;



        
        if(ref($stue1)==ref($f1) && ref($stuv11)==ref($b11) && ref($stuv12)==ref($b12) && ref($stuv13)==ref($b13)){          
           $flag5 = 6;
           if($stuv11 != 0 || $stuv12 != 0 || $stuv13!=0 ){
             $flag5 = 7;
             my $stuv1 = new Matrix(3, 1);
             $stuv1 -> zero;
             $stuv1 -> assign(1,1, $stuv11);
             $stuv1 -> assign(2,1, $stuv12);
             $stuv1 -> assign(3,1, $stuv13);
             my $stub = new Matrix(3, 3);
             $stub-> zero;
             $stub->assign(1,1, $stue1);
             $stub->assign(2,2, $stue1);
             $stub->assign(3,3, $stue1);
             if( $matrix * $stuv1 == $stub * $stuv1){
               $flag1 = 1;
             }
           }
        }
        
